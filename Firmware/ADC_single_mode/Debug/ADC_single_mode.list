
ADC_single_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003914  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a7c  08003a7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a7c  08003a7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a7c  08003a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08003af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003af4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b443  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001faa  00000000  00000000  0002b4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129f0  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9ba  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c443  00000000  00000000  0004d8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9d0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  000b9d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039bc 	.word	0x080039bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080039bc 	.word	0x080039bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <eeprom_write_to_address>:
#define READ 0b00000011
#define WRITE 0b00000010

static void delay(uint32_t microseconds);

void eeprom_write_to_address(uint16_t address, uint8_t data) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	801a      	strh	r2, [r3, #0]
 8000240:	1d7b      	adds	r3, r7, #5
 8000242:	1c0a      	adds	r2, r1, #0
 8000244:	701a      	strb	r2, [r3, #0]
  uint8_t dummy; // a variable which will be used to pull junk from the DR

  // first, set the Write Enable latch
  GPIOB->BSRR |= GPIO_BSRR_BR_12; // pull CS low
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <eeprom_write_to_address+0x108>)
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <eeprom_write_to_address+0x108>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0549      	lsls	r1, r1, #21
 8000250:	430a      	orrs	r2, r1
 8000252:	619a      	str	r2, [r3, #24]
  delay(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 f94b 	bl	80004f0 <delay>
  *((uint8_t*)(&SPI2->DR)) = WREN;
 800025a:	4b39      	ldr	r3, [pc, #228]	; (8000340 <eeprom_write_to_address+0x10c>)
 800025c:	2206      	movs	r2, #6
 800025e:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	4b38      	ldr	r3, [pc, #224]	; (8000344 <eeprom_write_to_address+0x110>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	2201      	movs	r2, #1
 8000268:	4013      	ands	r3, r2
 800026a:	d0fa      	beq.n	8000262 <eeprom_write_to_address+0x2e>
  dummy = SPI2->DR;
 800026c:	4b35      	ldr	r3, [pc, #212]	; (8000344 <eeprom_write_to_address+0x110>)
 800026e:	68da      	ldr	r2, [r3, #12]
 8000270:	230f      	movs	r3, #15
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	701a      	strb	r2, [r3, #0]
  GPIOB->BSRR |= GPIO_BSRR_BS_12; // pull CS high
 8000276:	4b31      	ldr	r3, [pc, #196]	; (800033c <eeprom_write_to_address+0x108>)
 8000278:	699a      	ldr	r2, [r3, #24]
 800027a:	4b30      	ldr	r3, [pc, #192]	; (800033c <eeprom_write_to_address+0x108>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	0149      	lsls	r1, r1, #5
 8000280:	430a      	orrs	r2, r1
 8000282:	619a      	str	r2, [r3, #24]
  delay(5000);
 8000284:	4b30      	ldr	r3, [pc, #192]	; (8000348 <eeprom_write_to_address+0x114>)
 8000286:	0018      	movs	r0, r3
 8000288:	f000 f932 	bl	80004f0 <delay>

  // send the write instruction
  GPIOB->BSRR |= GPIO_BSRR_BR_12; // pull CS low
 800028c:	4b2b      	ldr	r3, [pc, #172]	; (800033c <eeprom_write_to_address+0x108>)
 800028e:	699a      	ldr	r2, [r3, #24]
 8000290:	4b2a      	ldr	r3, [pc, #168]	; (800033c <eeprom_write_to_address+0x108>)
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	0549      	lsls	r1, r1, #21
 8000296:	430a      	orrs	r2, r1
 8000298:	619a      	str	r2, [r3, #24]
  delay(1);
 800029a:	2001      	movs	r0, #1
 800029c:	f000 f928 	bl	80004f0 <delay>
  *((uint8_t*)(&SPI2->DR)) = WRITE;
 80002a0:	4b27      	ldr	r3, [pc, #156]	; (8000340 <eeprom_write_to_address+0x10c>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	4b26      	ldr	r3, [pc, #152]	; (8000344 <eeprom_write_to_address+0x110>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	2201      	movs	r2, #1
 80002ae:	4013      	ands	r3, r2
 80002b0:	d0fa      	beq.n	80002a8 <eeprom_write_to_address+0x74>
  dummy = SPI2->DR;
 80002b2:	4b24      	ldr	r3, [pc, #144]	; (8000344 <eeprom_write_to_address+0x110>)
 80002b4:	68da      	ldr	r2, [r3, #12]
 80002b6:	230f      	movs	r3, #15
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	701a      	strb	r2, [r3, #0]
  // send a 16 bit address
  *((uint8_t*)(&SPI2->DR)) = (address >> 8); // address MSB
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	0a1b      	lsrs	r3, r3, #8
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <eeprom_write_to_address+0x10c>)
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <eeprom_write_to_address+0x110>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	2201      	movs	r2, #1
 80002d2:	4013      	ands	r3, r2
 80002d4:	d0fa      	beq.n	80002cc <eeprom_write_to_address+0x98>
  dummy = SPI2->DR;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <eeprom_write_to_address+0x110>)
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	230f      	movs	r3, #15
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	701a      	strb	r2, [r3, #0]
  *((uint8_t*)(&SPI2->DR)) = (address); // address LSB
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <eeprom_write_to_address+0x10c>)
 80002e2:	1dbb      	adds	r3, r7, #6
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	7013      	strb	r3, [r2, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <eeprom_write_to_address+0x110>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4013      	ands	r3, r2
 80002f4:	d0fa      	beq.n	80002ec <eeprom_write_to_address+0xb8>
  dummy = SPI2->DR;
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <eeprom_write_to_address+0x110>)
 80002f8:	68da      	ldr	r2, [r3, #12]
 80002fa:	230f      	movs	r3, #15
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	701a      	strb	r2, [r3, #0]
  // send the data
  *((uint8_t*)(&SPI2->DR)) = data;
 8000300:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <eeprom_write_to_address+0x10c>)
 8000302:	1d7b      	adds	r3, r7, #5
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	7013      	strb	r3, [r2, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <eeprom_write_to_address+0x110>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2201      	movs	r2, #1
 8000310:	4013      	ands	r3, r2
 8000312:	d0fa      	beq.n	800030a <eeprom_write_to_address+0xd6>
  dummy = SPI2->DR;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <eeprom_write_to_address+0x110>)
 8000316:	68da      	ldr	r2, [r3, #12]
 8000318:	230f      	movs	r3, #15
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	701a      	strb	r2, [r3, #0]
  GPIOB->BSRR |= GPIO_BSRR_BS_12; // pull CS high
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <eeprom_write_to_address+0x108>)
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <eeprom_write_to_address+0x108>)
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	0149      	lsls	r1, r1, #5
 8000328:	430a      	orrs	r2, r1
 800032a:	619a      	str	r2, [r3, #24]
  delay(5000);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <eeprom_write_to_address+0x114>)
 800032e:	0018      	movs	r0, r3
 8000330:	f000 f8de 	bl	80004f0 <delay>
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b004      	add	sp, #16
 800033a:	bd80      	pop	{r7, pc}
 800033c:	48000400 	.word	0x48000400
 8000340:	4000380c 	.word	0x4000380c
 8000344:	40003800 	.word	0x40003800
 8000348:	00001388 	.word	0x00001388

0800034c <eeprom_read_from_address>:

uint8_t eeprom_read_from_address(uint16_t address) {
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	0002      	movs	r2, r0
 8000354:	1dbb      	adds	r3, r7, #6
 8000356:	801a      	strh	r2, [r3, #0]
  uint8_t dummy; // a variable which will be used to pull junk from the DR
  // send the read instruction
  GPIOB->BSRR |= GPIO_BSRR_BR_12; // pull CS low
 8000358:	4b2c      	ldr	r3, [pc, #176]	; (800040c <eeprom_read_from_address+0xc0>)
 800035a:	699a      	ldr	r2, [r3, #24]
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <eeprom_read_from_address+0xc0>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0549      	lsls	r1, r1, #21
 8000362:	430a      	orrs	r2, r1
 8000364:	619a      	str	r2, [r3, #24]
  delay(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f8c2 	bl	80004f0 <delay>
  *((uint8_t*)(&SPI2->DR)) = READ;
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <eeprom_read_from_address+0xc4>)
 800036e:	2203      	movs	r2, #3
 8000370:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <eeprom_read_from_address+0xc8>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	d0fa      	beq.n	8000374 <eeprom_read_from_address+0x28>
  dummy = SPI2->DR;
 800037e:	4b25      	ldr	r3, [pc, #148]	; (8000414 <eeprom_read_from_address+0xc8>)
 8000380:	68da      	ldr	r2, [r3, #12]
 8000382:	230f      	movs	r3, #15
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	701a      	strb	r2, [r3, #0]
  // send a 16 bit address
  *((uint8_t*)(&SPI2->DR)) = (address >> 8); // address MSB
 8000388:	1dbb      	adds	r3, r7, #6
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <eeprom_read_from_address+0xc4>)
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <eeprom_read_from_address+0xc8>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	2201      	movs	r2, #1
 800039e:	4013      	ands	r3, r2
 80003a0:	d0fa      	beq.n	8000398 <eeprom_read_from_address+0x4c>
  dummy = SPI2->DR;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <eeprom_read_from_address+0xc8>)
 80003a4:	68da      	ldr	r2, [r3, #12]
 80003a6:	230f      	movs	r3, #15
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	701a      	strb	r2, [r3, #0]
  *((uint8_t*)(&SPI2->DR)) = (address); // address LSB
 80003ac:	4a18      	ldr	r2, [pc, #96]	; (8000410 <eeprom_read_from_address+0xc4>)
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	7013      	strb	r3, [r2, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <eeprom_read_from_address+0xc8>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	2201      	movs	r2, #1
 80003be:	4013      	ands	r3, r2
 80003c0:	d0fa      	beq.n	80003b8 <eeprom_read_from_address+0x6c>
  dummy = SPI2->DR;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <eeprom_read_from_address+0xc8>)
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	230f      	movs	r3, #15
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	701a      	strb	r2, [r3, #0]
  // clock in the data
  *((uint8_t*)(&SPI2->DR)) = 0x42; // clock out some junk data
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <eeprom_read_from_address+0xc4>)
 80003ce:	2242      	movs	r2, #66	; 0x42
 80003d0:	701a      	strb	r2, [r3, #0]
  while ((SPI2->SR & SPI_SR_RXNE) == 0); // hang while RX is empty
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <eeprom_read_from_address+0xc8>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	2201      	movs	r2, #1
 80003da:	4013      	ands	r3, r2
 80003dc:	d0fa      	beq.n	80003d4 <eeprom_read_from_address+0x88>
  dummy = SPI2->DR;
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <eeprom_read_from_address+0xc8>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	240f      	movs	r4, #15
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	701a      	strb	r2, [r3, #0]
  GPIOB->BSRR |= GPIO_BSRR_BS_12; // pull CS high
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <eeprom_read_from_address+0xc0>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <eeprom_read_from_address+0xc0>)
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	0149      	lsls	r1, r1, #5
 80003f2:	430a      	orrs	r2, r1
 80003f4:	619a      	str	r2, [r3, #24]
  delay(5000);
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <eeprom_read_from_address+0xcc>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 f879 	bl	80004f0 <delay>
  return dummy;
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	781b      	ldrb	r3, [r3, #0]
}
 8000402:	0018      	movs	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	b005      	add	sp, #20
 8000408:	bd90      	pop	{r4, r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	48000400 	.word	0x48000400
 8000410:	4000380c 	.word	0x4000380c
 8000414:	40003800 	.word	0x40003800
 8000418:	00001388 	.word	0x00001388

0800041c <eeprom_init_spi>:

void eeprom_init_spi(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  // clock to PB
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable clock for SPI port
 8000420:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <eeprom_init_spi+0xc8>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	4b2f      	ldr	r3, [pc, #188]	; (80004e4 <eeprom_init_spi+0xc8>)
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	02c9      	lsls	r1, r1, #11
 800042a:	430a      	orrs	r2, r1
 800042c:	615a      	str	r2, [r3, #20]
  // no need to map pins to the perpiheral - they are AF0
  GPIOB->MODER |= GPIO_MODER_MODER13_1; // set pin SCK (PB13) to Alternate Function
 800042e:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <eeprom_init_spi+0xcc>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <eeprom_init_spi+0xcc>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0509      	lsls	r1, r1, #20
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER14_1; // set pin MISO (PB14) to Alternate Function
 800043c:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <eeprom_init_spi+0xcc>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <eeprom_init_spi+0xcc>)
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	0589      	lsls	r1, r1, #22
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER15_1; // set pin MOSI (PB15) to Alternate Function
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <eeprom_init_spi+0xcc>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <eeprom_init_spi+0xcc>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	0609      	lsls	r1, r1, #24
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER12_0; // set pin CS (PB12) to output push-pull
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <eeprom_init_spi+0xcc>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <eeprom_init_spi+0xcc>)
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	0449      	lsls	r1, r1, #17
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
  GPIOB->BSRR |= GPIO_BSRR_BS_12; // pull CS high
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <eeprom_init_spi+0xcc>)
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <eeprom_init_spi+0xcc>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0149      	lsls	r1, r1, #5
 8000470:	430a      	orrs	r2, r1
 8000472:	619a      	str	r2, [r3, #24]

  // clock enable to SPI2
  RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <eeprom_init_spi+0xc8>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <eeprom_init_spi+0xc8>)
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	01c9      	lsls	r1, r1, #7
 800047e:	430a      	orrs	r2, r1
 8000480:	61da      	str	r2, [r3, #28]
  SPI2->CR1 |= SPI_CR1_BIDIOE; // enable output
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <eeprom_init_spi+0xd0>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <eeprom_init_spi+0xd0>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	01c9      	lsls	r1, r1, #7
 800048c:	430a      	orrs	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
  SPI2->CR1 |= (SPI_CR1_BR_0 |  SPI_CR1_BR_1); // set baud to fpclk / 16 = 3 MHz
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <eeprom_init_spi+0xd0>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <eeprom_init_spi+0xd0>)
 8000496:	2118      	movs	r1, #24
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
  SPI2->CR1 |= SPI_CR1_MSTR; // set to master mode
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <eeprom_init_spi+0xd0>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <eeprom_init_spi+0xd0>)
 80004a2:	2104      	movs	r1, #4
 80004a4:	430a      	orrs	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]
  SPI2->CR2 |= SPI_CR2_FRXTH; // set RX threshold to be 8 bits
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <eeprom_init_spi+0xd0>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <eeprom_init_spi+0xd0>)
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0149      	lsls	r1, r1, #5
 80004b2:	430a      	orrs	r2, r1
 80004b4:	605a      	str	r2, [r3, #4]
  SPI2->CR2 |= SPI_CR2_SSOE; // enable slave output to work in master mode
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <eeprom_init_spi+0xd0>)
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <eeprom_init_spi+0xd0>)
 80004bc:	2104      	movs	r1, #4
 80004be:	430a      	orrs	r2, r1
 80004c0:	605a      	str	r2, [r3, #4]
  SPI2->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2); // set to 8bit mode
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <eeprom_init_spi+0xd0>)
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <eeprom_init_spi+0xd0>)
 80004c8:	21e0      	movs	r1, #224	; 0xe0
 80004ca:	00c9      	lsls	r1, r1, #3
 80004cc:	430a      	orrs	r2, r1
 80004ce:	605a      	str	r2, [r3, #4]
  SPI2->CR1 |= SPI_CR1_SPE; // enable the SPI peripheral
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <eeprom_init_spi+0xd0>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <eeprom_init_spi+0xd0>)
 80004d6:	2140      	movs	r1, #64	; 0x40
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000400 	.word	0x48000400
 80004ec:	40003800 	.word	0x40003800

080004f0 <delay>:

static void delay(uint32_t microseconds) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  microseconds *= 3;
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	0013      	movs	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	189b      	adds	r3, r3, r2
 8000504:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++) {
 8000506:	e004      	b.n	8000512 <delay+0x22>
    __asm("nop");
 8000508:	46c0      	nop			; (mov r8, r8)
    __asm("nop");
 800050a:	46c0      	nop			; (mov r8, r8)
  for(; counter<microseconds; counter++) {
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	429a      	cmp	r2, r3
 8000518:	d8f6      	bhi.n	8000508 <delay+0x18>
  }
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b004      	add	sp, #16
 8000522:	bd80      	pop	{r7, pc}

08000524 <lcd_string>:
static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type);
static void lcd_write4bits(uint8_t value);

//============================================================================

void lcd_string(uint8_t *string_to_print) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t count=0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 8000530:	e00d      	b.n	800054e <lcd_string+0x2a>
    lcd_put (string_to_print[count], TEXT);
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2101      	movs	r1, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f8bb 	bl	80006b8 <lcd_put>
    delay(43); // a DRAM write requires at least 43 us execution time
 8000542:	202b      	movs	r0, #43	; 0x2b
 8000544:	f000 f950 	bl	80007e8 <delay>
    count++;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d1eb      	bne.n	8000532 <lcd_string+0xe>
  }
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b004      	add	sp, #16
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_two_line_write>:
void lcd_two_line_write(uint8_t* line1, uint8_t* line2) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  lcd_command(LCD_CLEAR_DISPLAY);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 f88c 	bl	800068c <lcd_command>
  lcd_string(line1);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ffd4 	bl	8000524 <lcd_string>
  lcd_command(LCD_GOTO_LINE_2);
 800057c:	20c0      	movs	r0, #192	; 0xc0
 800057e:	f000 f885 	bl	800068c <lcd_command>
  lcd_string(line2);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	0018      	movs	r0, r3
 8000586:	f7ff ffcd 	bl	8000524 <lcd_string>
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <lcd_init>:

//============================================================================

void lcd_init () {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /*This function sets up the port lines for the LCD and initializes
  the LCD module for use.*/
  // set the relevant pins to outputs
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000598:	4b37      	ldr	r3, [pc, #220]	; (8000678 <lcd_init+0xe4>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <lcd_init+0xe4>)
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0309      	lsls	r1, r1, #12
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN; 
 80005a6:	4b34      	ldr	r3, [pc, #208]	; (8000678 <lcd_init+0xe4>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <lcd_init+0xe4>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	02c9      	lsls	r1, r1, #11
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 
 80005b4:	4b30      	ldr	r3, [pc, #192]	; (8000678 <lcd_init+0xe4>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <lcd_init+0xe4>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0289      	lsls	r1, r1, #10
 80005be:	430a      	orrs	r2, r1
 80005c0:	615a      	str	r2, [r3, #20]
  GPIOC->MODER |= GPIO_MODER_MODER14_0;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <lcd_init+0xe8>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <lcd_init+0xe8>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0549      	lsls	r1, r1, #21
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
  GPIOC->MODER |= GPIO_MODER_MODER15_0;
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <lcd_init+0xe8>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <lcd_init+0xe8>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER8_0;
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <lcd_init+0xec>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <lcd_init+0xec>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0249      	lsls	r1, r1, #9
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER9_0;
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <lcd_init+0xec>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <lcd_init+0xec>)
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	02c9      	lsls	r1, r1, #11
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER12_0;
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0449      	lsls	r1, r1, #17
 8000608:	430a      	orrs	r2, r1
 800060a:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER15_0;
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	05c9      	lsls	r1, r1, #23
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]

  delay(30000); //allow the LCD 30 ms power up time
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <lcd_init+0xf0>)
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f8e1 	bl	80007e8 <delay>
  // in case in 2nd nibble of 4 bit tansfer, this goes to 1st nibble
  // if byte in 8-bit mode, keeps in 8-bit mode
  lcd_write4bits(0x03);   
 8000626:	2003      	movs	r0, #3
 8000628:	f000 f878 	bl	800071c <lcd_write4bits>
  delay(4100);
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <lcd_init+0xf4>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f8da 	bl	80007e8 <delay>
  lcd_write4bits(0x03);  // garanteed to be byte of 8-bit data for first byte of 4-bit.
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f871 	bl	800071c <lcd_write4bits>
  delay(39);
 800063a:	2027      	movs	r0, #39	; 0x27
 800063c:	f000 f8d4 	bl	80007e8 <delay>
  lcd_write4bits(0x03); // necessary in case this is the 2nd nibble of 4-bit transfer.
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f86b 	bl	800071c <lcd_write4bits>
  delay(39);
 8000646:	2027      	movs	r0, #39	; 0x27
 8000648:	f000 f8ce 	bl	80007e8 <delay>
  // switch to 4-bit. This will latch in a byte as it's garanteed to now be in 8-bit
  lcd_write4bits(0x02);   
 800064c:	2002      	movs	r0, #2
 800064e:	f000 f865 	bl	800071c <lcd_write4bits>
  delay(39);
 8000652:	2027      	movs	r0, #39	; 0x27
 8000654:	f000 f8c8 	bl	80007e8 <delay>
  lcd_command(LCD_FOUR_BIT_TWO_LINE_MODE); //0x28
 8000658:	2028      	movs	r0, #40	; 0x28
 800065a:	f000 f817 	bl	800068c <lcd_command>
  lcd_command(LCD_DISPLAY_OFF); // 0x08
 800065e:	2008      	movs	r0, #8
 8000660:	f000 f814 	bl	800068c <lcd_command>
  lcd_command(LCD_CLEAR_DISPLAY); // 0x01
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f811 	bl	800068c <lcd_command>
  lcd_command(LCD_DISPLAY_ON); // 0x0C
 800066a:	200c      	movs	r0, #12
 800066c:	f000 f80e 	bl	800068c <lcd_command>
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40021000 	.word	0x40021000
 800067c:	48000800 	.word	0x48000800
 8000680:	48000400 	.word	0x48000400
 8000684:	00007530 	.word	0x00007530
 8000688:	00001004 	.word	0x00001004

0800068c <lcd_command>:

//============================================================================

void lcd_command (enum LcdCommand command) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	0002      	movs	r2, r0
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	701a      	strb	r2, [r3, #0]
  //This function sends a command to the LCD. 
  //Care is taken not to interfere with the other lines on the port.
  lcd_put((uint8_t)command, COMMAND);
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f80a 	bl	80006b8 <lcd_put>
  delay(1530); // 1.53 ms is the maximum delay we should need for any command.
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <lcd_command+0x28>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f89e 	bl	80007e8 <delay>
  // TODO: fix the above to have variable lengths as required by different commands.
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	000005fa 	.word	0x000005fa

080006b8 <lcd_put>:

//============================================================================

static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	1dbb      	adds	r3, r7, #6
 80006c6:	1c0a      	adds	r2, r1, #0
 80006c8:	701a      	strb	r2, [r3, #0]
    //Puts a single character on the LCD at the next position on the screen.
    //The character to be printed is in the input parameter. For numbers, letters 
    //and other common characters the ASCII code will produce correct display.
    //Refer to the Hitachi HD44780 datasheet for full character set information.
    if (ch_type == TEXT) {
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d107      	bne.n	80006e2 <lcd_put+0x2a>
        GPIOC->BSRR |= GPIO_BSRR_BS_14;// pull RS (PC14) high
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <lcd_put+0x60>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <lcd_put+0x60>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	01c9      	lsls	r1, r1, #7
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	e00a      	b.n	80006f8 <lcd_put+0x40>
    } else if (ch_type == COMMAND) {
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d106      	bne.n	80006f8 <lcd_put+0x40>
        GPIOC->BSRR |= GPIO_BSRR_BR_14;// pull RS (PC14) low
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <lcd_put+0x60>)
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <lcd_put+0x60>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	05c9      	lsls	r1, r1, #23
 80006f4:	430a      	orrs	r2, r1
 80006f6:	619a      	str	r2, [r3, #24]
    }
    // write upper nibble
    lcd_write4bits(character >> 4);
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f80b 	bl	800071c <lcd_write4bits>
    // write lower nibble
    lcd_write4bits(character);
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f806 	bl	800071c <lcd_write4bits>
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}
 8000718:	48000800 	.word	0x48000800

0800071c <lcd_write4bits>:

// This function outputs the lower 4 bits onto the data lines
static void lcd_write4bits(uint8_t character) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	701a      	strb	r2, [r3, #0]
  // lower nibble to data lines
  if ((character & 0x08) != 0) {
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2208      	movs	r2, #8
 800072e:	4013      	ands	r3, r2
 8000730:	d009      	beq.n	8000746 <lcd_write4bits+0x2a>
    GPIOA->BSRR |= GPIO_BSRR_BS_15;
 8000732:	2390      	movs	r3, #144	; 0x90
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	2390      	movs	r3, #144	; 0x90
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0209      	lsls	r1, r1, #8
 8000740:	430a      	orrs	r2, r1
 8000742:	619a      	str	r2, [r3, #24]
 8000744:	e008      	b.n	8000758 <lcd_write4bits+0x3c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_15;
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	0609      	lsls	r1, r1, #24
 8000754:	430a      	orrs	r2, r1
 8000756:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x04) != 0) {
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2204      	movs	r2, #4
 800075e:	4013      	ands	r3, r2
 8000760:	d009      	beq.n	8000776 <lcd_write4bits+0x5a>
    GPIOA->BSRR |= GPIO_BSRR_BS_12;
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0149      	lsls	r1, r1, #5
 8000770:	430a      	orrs	r2, r1
 8000772:	619a      	str	r2, [r3, #24]
 8000774:	e008      	b.n	8000788 <lcd_write4bits+0x6c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_12;
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	699a      	ldr	r2, [r3, #24]
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x02) != 0) {
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2202      	movs	r2, #2
 800078e:	4013      	ands	r3, r2
 8000790:	d007      	beq.n	80007a2 <lcd_write4bits+0x86>
    GPIOB->BSRR |= GPIO_BSRR_BS_9;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <lcd_write4bits+0xc8>)
 8000794:	699a      	ldr	r2, [r3, #24]
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <lcd_write4bits+0xc8>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0089      	lsls	r1, r1, #2
 800079c:	430a      	orrs	r2, r1
 800079e:	619a      	str	r2, [r3, #24]
 80007a0:	e006      	b.n	80007b0 <lcd_write4bits+0x94>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_9;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <lcd_write4bits+0xc8>)
 80007a4:	699a      	ldr	r2, [r3, #24]
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <lcd_write4bits+0xc8>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0489      	lsls	r1, r1, #18
 80007ac:	430a      	orrs	r2, r1
 80007ae:	619a      	str	r2, [r3, #24]
  } 
  if ((character & 0x01) != 0) {
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2201      	movs	r2, #1
 80007b6:	4013      	ands	r3, r2
 80007b8:	d007      	beq.n	80007ca <lcd_write4bits+0xae>
    GPIOB->BSRR |= GPIO_BSRR_BS_8;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <lcd_write4bits+0xc8>)
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <lcd_write4bits+0xc8>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0049      	lsls	r1, r1, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	619a      	str	r2, [r3, #24]
 80007c8:	e006      	b.n	80007d8 <lcd_write4bits+0xbc>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_8;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <lcd_write4bits+0xc8>)
 80007cc:	699a      	ldr	r2, [r3, #24]
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <lcd_write4bits+0xc8>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0449      	lsls	r1, r1, #17
 80007d4:	430a      	orrs	r2, r1
 80007d6:	619a      	str	r2, [r3, #24]
  }
  pulse_strobe ();
 80007d8:	f000 f820 	bl	800081c <pulse_strobe>
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	48000400 	.word	0x48000400

080007e8 <delay>:

//============================================================================


static void delay(uint32_t microseconds) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  microseconds *= 3;
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	0013      	movs	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++) {
 80007fe:	e004      	b.n	800080a <delay+0x22>
    __asm("nop");
 8000800:	46c0      	nop			; (mov r8, r8)
    __asm("nop");
 8000802:	46c0      	nop			; (mov r8, r8)
  for(; counter<microseconds; counter++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d8f6      	bhi.n	8000800 <delay+0x18>
  }
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b004      	add	sp, #16
 800081a:	bd80      	pop	{r7, pc}

0800081c <pulse_strobe>:

static void pulse_strobe (void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  //Pulse the strobe line of the LCD to indicate that data is ready.
  delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ffe1 	bl	80007e8 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BS_15;// pull E (PC15) high
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <pulse_strobe+0x38>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <pulse_strobe+0x38>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0209      	lsls	r1, r1, #8
 8000830:	430a      	orrs	r2, r1
 8000832:	619a      	str	r2, [r3, #24]
  delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ffd7 	bl	80007e8 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BR_15;// pull E (PC15) low
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <pulse_strobe+0x38>)
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <pulse_strobe+0x38>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0609      	lsls	r1, r1, #24
 8000844:	430a      	orrs	r2, r1
 8000846:	619a      	str	r2, [r3, #24]
  delay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ffcd 	bl	80007e8 <delay>
}                     
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	48000800 	.word	0x48000800

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0c2      	sub	sp, #264	; 0x108
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fcb7 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f8b1 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f9fb 	bl	8000c60 <MX_GPIO_Init>
  MX_ADC_Init();
 800086a:	f000 f99d 	bl	8000ba8 <MX_ADC_Init>
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  
  uint32_t memo;
  memo =  check_for_eeprom_magic();
 800086e:	f000 f909 	bl	8000a84 <check_for_eeprom_magic>
 8000872:	0003      	movs	r3, r0
 8000874:	1d7a      	adds	r2, r7, #5
 8000876:	32ff      	adds	r2, #255	; 0xff
 8000878:	6013      	str	r3, [r2, #0]
   HAL_ADC_Start (&hadc);
 800087a:	4b47      	ldr	r3, [pc, #284]	; (8000998 <main+0x140>)
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fe6f 	bl	8001560 <HAL_ADC_Start>
   temp_sensor_init_iic();
 8000882:	f000 fb91 	bl	8000fa8 <temp_sensor_init_iic>
   eeprom_init_spi();
 8000886:	f7ff fdc9 	bl	800041c <eeprom_init_spi>
   init_usart();
 800088a:	f000 f933 	bl	8000af4 <init_usart>
   lcd_init(); // set up LCD lines and send initialisation commands
 800088e:	f7ff fe81 	bl	8000594 <lcd_init>
    lcd_command(LCD_CLEAR_DISPLAY);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fefa 	bl	800068c <lcd_command>

	// lcd_string("Zwivhuya Ndou");
	          	   // go to lower line

	  uint8_t count;
	  while((GPIOA->IDR & SW0)!=0){
 8000898:	e04a      	b.n	8000930 <main+0xd8>
		  HAL_ADC_Start (&hadc);
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <main+0x140>)
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fe5f 	bl	8001560 <HAL_ADC_Start>
		  temperature  = temp_sensor_read();
 80008a2:	f000 fc27 	bl	80010f4 <temp_sensor_read>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x144>)
 80008ac:	701a      	strb	r2, [r3, #0]

		  data[count] = temperature;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	33ff      	adds	r3, #255	; 0xff
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4a39      	ldr	r2, [pc, #228]	; (800099c <main+0x144>)
 80008b6:	7811      	ldrb	r1, [r2, #0]
 80008b8:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <main+0x148>)
 80008ba:	2084      	movs	r0, #132	; 0x84
 80008bc:	0040      	lsls	r0, r0, #1
 80008be:	1812      	adds	r2, r2, r0
 80008c0:	19d2      	adds	r2, r2, r7
 80008c2:	54d1      	strb	r1, [r2, r3]
		  adcValue =  HAL_ADC_GetValue(&hadc); //we are using a 512x8 eeprom
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <main+0x140>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fe9e 	bl	8001608 <HAL_ADC_GetValue>
 80008cc:	0003      	movs	r3, r0
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <main+0x14c>)
 80008d2:	701a      	strb	r2, [r3, #0]
	      	eeprom_write_to_address(EEPROM_DEVICE_ADDR, adcValue  );
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <main+0x150>)
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <main+0x14c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	0010      	movs	r0, r2
 80008e0:	f7ff fca8 	bl	8000234 <eeprom_write_to_address>
	      	eeprom_write_to_address(EEPROM_DEVICE_ADDR, temperature );
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <main+0x150>)
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <main+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	0010      	movs	r0, r2
 80008f0:	f7ff fca0 	bl	8000234 <eeprom_write_to_address>
	      	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <main+0x154>)
 80008f6:	2108      	movs	r1, #8
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fae2 	bl	8001ec2 <HAL_GPIO_TogglePin>
	      	//count++;
	        HAL_Delay(100);
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f000 fcca 	bl	8001298 <HAL_Delay>

	        sprintf(strTemp, "temperature = %d", temperature);
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <main+0x144>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	4929      	ldr	r1, [pc, #164]	; (80009b0 <main+0x158>)
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <main+0x15c>)
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fbea 	bl	80030e8 <siprintf>
	        sprintf(strAdc, "ADC = %d", adcValue);
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <main+0x14c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4927      	ldr	r1, [pc, #156]	; (80009b8 <main+0x160>)
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <main+0x164>)
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fbe2 	bl	80030e8 <siprintf>

	        lcd_two_line_write(strTemp, strAdc);
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <main+0x164>)
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <main+0x15c>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fe1a 	bl	8000564 <lcd_two_line_write>
	  while((GPIOA->IDR & SW0)!=0){
 8000930:	2390      	movs	r3, #144	; 0x90
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	d1ae      	bne.n	800089a <main+0x42>

	        }
	  while(1)
	  {

		    lcd_command(LCD_CLEAR_DISPLAY);
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fea5 	bl	800068c <lcd_command>


      //adcValueEEpromRead =10; test

      tempEEpromRead = eeprom_read_from_address(EEPROM_DEVICE_ADDR);;;// eeprom_read_from_address(EEPROM_DEVICE_ADDR);
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <main+0x150>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fd00 	bl	800034c <eeprom_read_from_address>
 800094c:	0003      	movs	r3, r0
 800094e:	001a      	movs	r2, r3
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <main+0x168>)
 8000952:	701a      	strb	r2, [r3, #0]

      sprintf(strTempRead,  "temperature = %d", tempEEpromRead);
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <main+0x168>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	4915      	ldr	r1, [pc, #84]	; (80009b0 <main+0x158>)
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <main+0x16c>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 fbc2 	bl	80030e8 <siprintf>


		 	        lcd_two_line_write(strTempRead, strTempRead);
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <main+0x16c>)
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <main+0x16c>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff fdfa 	bl	8000564 <lcd_two_line_write>



		  	 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <main+0x154>)
 8000972:	2101      	movs	r1, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f001 faa4 	bl	8001ec2 <HAL_GPIO_TogglePin>

		  	 HAL_Delay(500);
 800097a:	23fa      	movs	r3, #250	; 0xfa
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fc8a 	bl	8001298 <HAL_Delay>
		  	GPIOB->ODR |= 0xAA;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <main+0x154>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <main+0x154>)
 800098a:	21aa      	movs	r1, #170	; 0xaa
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
		  	 init_usart();
 8000990:	f000 f8b0 	bl	8000af4 <init_usart>
		    lcd_command(LCD_CLEAR_DISPLAY);
 8000994:	e7d2      	b.n	800093c <main+0xe4>
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000008c 	.word	0x2000008c
 800099c:	20000156 	.word	0x20000156
 80009a0:	fffffefc 	.word	0xfffffefc
 80009a4:	20000157 	.word	0x20000157
 80009a8:	20000154 	.word	0x20000154
 80009ac:	48000400 	.word	0x48000400
 80009b0:	080039d4 	.word	0x080039d4
 80009b4:	200001c0 	.word	0x200001c0
 80009b8:	080039e8 	.word	0x080039e8
 80009bc:	2000015c 	.word	0x2000015c
 80009c0:	20000158 	.word	0x20000158
 80009c4:	20000224 	.word	0x20000224

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b097      	sub	sp, #92	; 0x5c
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	2428      	movs	r4, #40	; 0x28
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	2330      	movs	r3, #48	; 0x30
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f002 fb7d 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009de:	2318      	movs	r3, #24
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f002 fb75 	bl	80030d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	0018      	movs	r0, r3
 80009f2:	2314      	movs	r3, #20
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f002 fb6e 	bl	80030d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2212      	movs	r2, #18
 8000a02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2210      	movs	r2, #16
 8000a14:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2210      	movs	r2, #16
 8000a1a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 fa67 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f975 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	2118      	movs	r1, #24
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2207      	movs	r2, #7
 8000a38:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2100      	movs	r1, #0
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fd6b 	bl	800252c <HAL_RCC_ClockConfig>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a5a:	f000 f95f 	bl	8000d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 fe81 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a76:	f000 f951 	bl	8000d1c <Error_Handler>
  }
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b017      	add	sp, #92	; 0x5c
 8000a80:	bd90      	pop	{r4, r7, pc}
	...

08000a84 <check_for_eeprom_magic>:


static uint32_t check_for_eeprom_magic(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

	uint8_t eeprom_magic[] = {0xDE, 0xAD, 0xBA, 0xBE};
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <check_for_eeprom_magic+0x64>)
 8000a8e:	601a      	str	r2, [r3, #0]
  lcd_two_line_write("Attemping to", "read from EEPROM");
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <check_for_eeprom_magic+0x68>)
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <check_for_eeprom_magic+0x6c>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fd64 	bl	8000564 <lcd_two_line_write>
  uint32_t pos;
  eeprom_init_spi();
 8000a9c:	f7ff fcbe 	bl	800041c <eeprom_init_spi>
  for(pos = 0; pos < sizeof(eeprom_magic); pos++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	e017      	b.n	8000ad6 <check_for_eeprom_magic+0x52>
    if (eeprom_read_from_address(pos) != eeprom_magic[pos]) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fc4e 	bl	800034c <eeprom_read_from_address>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d001      	beq.n	8000ac4 <check_for_eeprom_magic+0x40>
      return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e00c      	b.n	8000ade <check_for_eeprom_magic+0x5a>
    }
    eeprom_write_to_address(pos, 0x00); // erase the byte after verifying it
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fbb2 	bl	8000234 <eeprom_write_to_address>
  for(pos = 0; pos < sizeof(eeprom_magic); pos++) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d9e4      	bls.n	8000aa6 <check_for_eeprom_magic+0x22>
  }
  return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	bebaadde 	.word	0xbebaadde
 8000aec:	080039f4 	.word	0x080039f4
 8000af0:	08003a08 	.word	0x08003a08

08000af4 <init_usart>:
  for(; i < 565535; i++);
}



void init_usart(void) {
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  // clock to USART1
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <init_usart+0xa8>)
 8000afa:	699a      	ldr	r2, [r3, #24]
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <init_usart+0xa8>)
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	01c9      	lsls	r1, r1, #7
 8000b02:	430a      	orrs	r2, r1
 8000b04:	619a      	str	r2, [r3, #24]
  // clock to GPIOA
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <init_usart+0xa8>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <init_usart+0xa8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0289      	lsls	r1, r1, #10
 8000b10:	430a      	orrs	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
  // PA9 and PA10 to AF
  GPIOA->MODER |= GPIO_MODER_MODER9_1;
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	0309      	lsls	r1, r1, #12
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER10_1;
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2390      	movs	r3, #144	; 0x90
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0389      	lsls	r1, r1, #14
 8000b34:	430a      	orrs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
  // remap to correct AF
  GPIOA->AFR[1] |= (1 << (1*4)); // remap pin 9 to AF1
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b3e:	2390      	movs	r3, #144	; 0x90
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2110      	movs	r1, #16
 8000b44:	430a      	orrs	r2, r1
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOA->AFR[1] |= (1 << (2*4)); // remap pin 10 to AF1
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0049      	lsls	r1, r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  // BRR = fclk / baud = fclk / 115200
  SystemCoreClockUpdate();
 8000b5a:	f000 f9af 	bl	8000ebc <SystemCoreClockUpdate>
  USART1->BRR = SystemCoreClock/115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <init_usart+0xac>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4c10      	ldr	r4, [pc, #64]	; (8000ba4 <init_usart+0xb0>)
 8000b64:	22e1      	movs	r2, #225	; 0xe1
 8000b66:	0251      	lsls	r1, r2, #9
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff fad7 	bl	800011c <__udivsi3>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	60e3      	str	r3, [r4, #12]
  // enable with UE in CR1
  USART1->CR1 |= USART_CR1_UE;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <init_usart+0xb0>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <init_usart+0xb0>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
  USART1->CR1 |= USART_CR1_RE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <init_usart+0xb0>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <init_usart+0xb0>)
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
  USART1->CR1 |= USART_CR1_TE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <init_usart+0xb0>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <init_usart+0xb0>)
 8000b90:	2108      	movs	r1, #8
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f002 fa8e 	bl	80030d8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bbe:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <MX_ADC_Init+0xb4>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000bfa:	22c2      	movs	r2, #194	; 0xc2
 8000bfc:	32ff      	adds	r2, #255	; 0xff
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000c08:	2224      	movs	r2, #36	; 0x24
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fb62 	bl	80012e0 <HAL_ADC_Init>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 f87c 	bl	8000d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2204      	movs	r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	0152      	lsls	r2, r2, #5
 8000c30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	0552      	lsls	r2, r2, #21
 8000c38:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_ADC_Init+0xb0>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 fced 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000c4a:	f000 f867 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	40012400 	.word	0x40012400

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	240c      	movs	r4, #12
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2314      	movs	r3, #20
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f002 fa31 	bl	80030d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0289      	lsls	r1, r1, #10
 8000c80:	430a      	orrs	r2, r1
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	029b      	lsls	r3, r3, #10
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	02c9      	lsls	r1, r1, #11
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_GPIO_Init+0xb4>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	02db      	lsls	r3, r3, #11
 8000ca8:	4013      	ands	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2109      	movs	r1, #9
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f8e7 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2209      	movs	r2, #9
 8000cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	0010      	movs	r0, r2
 8000cda:	f000 ff65 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	0021      	movs	r1, r4
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	22c0      	movs	r2, #192	; 0xc0
 8000ce4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2212      	movs	r2, #18
 8000cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000d02:	0019      	movs	r1, r3
 8000d04:	0010      	movs	r0, r2
 8000d06:	f000 ff4f 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b009      	add	sp, #36	; 0x24
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000400 	.word	0x48000400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x44>)
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_MspInit+0x44>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	619a      	str	r2, [r3, #24]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x44>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x44>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_MspInit+0x44>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0549      	lsls	r1, r1, #21
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_MspInit+0x44>)
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2414      	movs	r4, #20
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f002 f9a8 	bl	80030d8 <memset>
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12b      	bne.n	8000dea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0089      	lsls	r1, r1, #2
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	619a      	str	r2, [r3, #24]
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0289      	lsls	r1, r1, #10
 8000db8:	430a      	orrs	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_ADC_MspInit+0x88>)
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2210      	movs	r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	193a      	adds	r2, r7, r4
 8000dde:	2390      	movs	r3, #144	; 0x90
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 fedf 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b00b      	add	sp, #44	; 0x2c
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40012400 	.word	0x40012400
 8000df8:	40021000 	.word	0x40021000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 fa1e 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <USART1_IRQHandler+0x14>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fd7c 	bl	8002930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200000cc 	.word	0x200000cc

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f002 f906 	bl	8003084 <__errno>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	425b      	negs	r3, r3
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	18d2      	adds	r2, r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20002000 	.word	0x20002000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20000288 	.word	0x20000288
 8000eac:	200002a0 	.word	0x200002a0

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <SystemCoreClockUpdate+0xdc>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d011      	beq.n	8000f06 <SystemCoreClockUpdate+0x4a>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d841      	bhi.n	8000f6c <SystemCoreClockUpdate+0xb0>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <SystemCoreClockUpdate+0x3a>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d004      	beq.n	8000efe <SystemCoreClockUpdate+0x42>
 8000ef4:	e03a      	b.n	8000f6c <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <SystemCoreClockUpdate+0xe4>)
 8000efa:	601a      	str	r2, [r3, #0]
      break;
 8000efc:	e03a      	b.n	8000f74 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <SystemCoreClockUpdate+0xe4>)
 8000f02:	601a      	str	r2, [r3, #0]
      break;
 8000f04:	e036      	b.n	8000f74 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <SystemCoreClockUpdate+0xdc>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	23f0      	movs	r3, #240	; 0xf0
 8000f0c:	039b      	lsls	r3, r3, #14
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SystemCoreClockUpdate+0xdc>)
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	3302      	adds	r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <SystemCoreClockUpdate+0xdc>)
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	3301      	adds	r3, #1
 8000f30:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10a      	bne.n	8000f52 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <SystemCoreClockUpdate+0xe4>)
 8000f40:	f7ff f8ec 	bl	800011c <__udivsi3>
 8000f44:	0003      	movs	r3, r0
 8000f46:	001a      	movs	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	435a      	muls	r2, r3
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f4e:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8000f50:	e010      	b.n	8000f74 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	000a      	movs	r2, r1
 8000f56:	0152      	lsls	r2, r2, #5
 8000f58:	1a52      	subs	r2, r2, r1
 8000f5a:	0193      	lsls	r3, r2, #6
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	185b      	adds	r3, r3, r1
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	001a      	movs	r2, r3
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f68:	601a      	str	r2, [r3, #0]
      break;
 8000f6a:	e003      	b.n	8000f74 <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <SystemCoreClockUpdate+0xe4>)
 8000f70:	601a      	str	r2, [r3, #0]
      break;
 8000f72:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SystemCoreClockUpdate+0xdc>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <SystemCoreClockUpdate+0xe8>)
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <SystemCoreClockUpdate+0xe0>)
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	007a1200 	.word	0x007a1200
 8000fa4:	08003a18 	.word	0x08003a18

08000fa8 <temp_sensor_init_iic>:
#include "temp_sensor_lib.h"

void temp_sensor_init_iic(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  uint8_t dummy;
  // enable clock to port B
  RCC->AHBENR |= RCC_AHBENR_GPIOFEN;
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <temp_sensor_init_iic+0x13c>)
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <temp_sensor_init_iic+0x13c>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	03c9      	lsls	r1, r1, #15
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	615a      	str	r2, [r3, #20]
  // of a transfer when we reset the master.
  // the following block of code simply toggles the clock
  // line 20 times to ensure that the slave gets a chance to 
  // clock out its data.
  // set clock line to open drain, output
  GPIOF->OTYPER |= GPIO_OTYPER_OT_6; // open drain
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]
  GPIOF->MODER |= GPIO_MODER_MODER6_0; // GP output
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	0149      	lsls	r1, r1, #5
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
  for (uint32_t loop_counter = 0; loop_counter < 20; loop_counter++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e021      	b.n	8001020 <temp_sensor_init_iic+0x78>
    for (volatile uint32_t delay = 0; delay < 10; delay++);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e002      	b.n	8000fe8 <temp_sensor_init_iic+0x40>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	d9f9      	bls.n	8000fe2 <temp_sensor_init_iic+0x3a>
    GPIOF->BSRR |= GPIO_BSRR_BR_6; // set clock low
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	03c9      	lsls	r1, r1, #15
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	619a      	str	r2, [r3, #24]
    for (volatile uint32_t delay = 0; delay < 10; delay++);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	e002      	b.n	8001008 <temp_sensor_init_iic+0x60>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b09      	cmp	r3, #9
 800100c:	d9f9      	bls.n	8001002 <temp_sensor_init_iic+0x5a>
    GPIOF->BSRR |= GPIO_BSRR_BS_6; // set clock high
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	430a      	orrs	r2, r1
 8001018:	619a      	str	r2, [r3, #24]
  for (uint32_t loop_counter = 0; loop_counter < 20; loop_counter++) {
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b13      	cmp	r3, #19
 8001024:	d9da      	bls.n	8000fdc <temp_sensor_init_iic+0x34>
  }

  // set SCLK (PF6) to alternate function, open drain
  GPIOF->MODER &= ~GPIO_MODER_MODER6; // reset the MODER bits
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <temp_sensor_init_iic+0x140>)
 800102c:	492f      	ldr	r1, [pc, #188]	; (80010ec <temp_sensor_init_iic+0x144>)
 800102e:	400a      	ands	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
  GPIOF->MODER |= GPIO_MODER_MODER6_1;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0189      	lsls	r1, r1, #6
 800103c:	430a      	orrs	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
  GPIOF->OTYPER |= GPIO_OTYPER_OT_6;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	430a      	orrs	r2, r1
 800104a:	605a      	str	r2, [r3, #4]
  // set SDA (PF7) to alternate function, open drain
  GPIOF->MODER |= GPIO_MODER_MODER7_1;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <temp_sensor_init_iic+0x140>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0209      	lsls	r1, r1, #8
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
  GPIOF->OTYPER |= GPIO_OTYPER_OT_7;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <temp_sensor_init_iic+0x140>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <temp_sensor_init_iic+0x140>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	430a      	orrs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]
  // PF6 and PF7 only have 1 alternate function, so it's not necessary to map them
  // set up IIC stuff

  // enable clock to I2C2
  RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <temp_sensor_init_iic+0x13c>)
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <temp_sensor_init_iic+0x13c>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	03c9      	lsls	r1, r1, #15
 8001070:	430a      	orrs	r2, r1
 8001072:	61da      	str	r2, [r3, #28]
  // disable the periperal
  I2C2->CR1 &= ~I2C_CR1_PE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <temp_sensor_init_iic+0x148>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <temp_sensor_init_iic+0x148>)
 800107a:	2101      	movs	r1, #1
 800107c:	438a      	bics	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
  // configure timing in PRESC, SCLDEL, SDADEL in TIMINGR
  I2C2->TIMINGR |= (0xC7 << 0); // SCLL
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <temp_sensor_init_iic+0x148>)
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <temp_sensor_init_iic+0x148>)
 8001086:	21c7      	movs	r1, #199	; 0xc7
 8001088:	430a      	orrs	r2, r1
 800108a:	611a      	str	r2, [r3, #16]
  I2C2->TIMINGR |= (0xC2 << 8); // SCLH
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <temp_sensor_init_iic+0x148>)
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <temp_sensor_init_iic+0x148>)
 8001092:	21c2      	movs	r1, #194	; 0xc2
 8001094:	0209      	lsls	r1, r1, #8
 8001096:	430a      	orrs	r2, r1
 8001098:	611a      	str	r2, [r3, #16]
//  I2C2->TIMINGR |= (0x13 << 0); // SCLL
//  I2C2->TIMINGR |= (0x0F << 8); // SCLH
  I2C2->TIMINGR |= (0x02 << 16); // SDADEL
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <temp_sensor_init_iic+0x148>)
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0289      	lsls	r1, r1, #10
 80010a4:	430a      	orrs	r2, r1
 80010a6:	611a      	str	r2, [r3, #16]
  I2C2->TIMINGR |= (0x04 << 20); // SCLDEL
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	03c9      	lsls	r1, r1, #15
 80010b2:	430a      	orrs	r2, r1
 80010b4:	611a      	str	r2, [r3, #16]
  I2C2->TIMINGR |= (1 << 28);// PRESC
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0549      	lsls	r1, r1, #21
 80010c0:	430a      	orrs	r2, r1
 80010c2:	611a      	str	r2, [r3, #16]
  // enable I2C
  I2C2->CR1 |= I2C_CR1_PE;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
  dummy = I2C2->RXDR; // empty the RX buffer
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <temp_sensor_init_iic+0x148>)
 80010d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d4:	230b      	movs	r3, #11
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	701a      	strb	r2, [r3, #0]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48001400 	.word	0x48001400
 80010ec:	ffffcfff 	.word	0xffffcfff
 80010f0:	40005800 	.word	0x40005800

080010f4 <temp_sensor_read>:

uint8_t temp_sensor_read(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  uint8_t temperature_value;
  // set addressing mode in ADD10
  //set slave address in SADD
  I2C2->CR2 |= TC74ADDR_READ;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <temp_sensor_read+0x80>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <temp_sensor_read+0x80>)
 8001100:	2191      	movs	r1, #145	; 0x91
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
  I2C2->CR2 |= (1 << 16); // set NBYTES to 1?
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <temp_sensor_read+0x80>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <temp_sensor_read+0x80>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0249      	lsls	r1, r1, #9
 8001110:	430a      	orrs	r2, r1
 8001112:	605a      	str	r2, [r3, #4]
  // send start and address with read byte. Goes into TXDR
  // indicate we are going to be doing a read
  I2C2->CR2 |= I2C_CR2_RD_WRN;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <temp_sensor_read+0x80>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <temp_sensor_read+0x80>)
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	00c9      	lsls	r1, r1, #3
 800111e:	430a      	orrs	r2, r1
 8001120:	605a      	str	r2, [r3, #4]
  // START and STOP done in CR2
  I2C2->CR2 |= I2C_CR2_START;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <temp_sensor_read+0x80>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <temp_sensor_read+0x80>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0189      	lsls	r1, r1, #6
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
  // wait for ACK (start bit reset)
  // wait for TC flag
  for(volatile uint32_t delay = 0; delay < 10000; delay++) {
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	e007      	b.n	8001146 <temp_sensor_read+0x52>
    if ( (I2C2->ISR & I2C_ISR_RXNE) != 0) {
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <temp_sensor_read+0x80>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d107      	bne.n	8001150 <temp_sensor_read+0x5c>
  for(volatile uint32_t delay = 0; delay < 10000; delay++) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <temp_sensor_read+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d9f3      	bls.n	8001136 <temp_sensor_read+0x42>
 800114e:	e000      	b.n	8001152 <temp_sensor_read+0x5e>
      break;
 8001150:	46c0      	nop			; (mov r8, r8)
    }
  }
  // clock in a byte
  temperature_value = I2C2->RXDR;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <temp_sensor_read+0x80>)
 8001154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	701a      	strb	r2, [r3, #0]
  // STOP condition
  I2C2->CR2 |= I2C_CR2_STOP;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <temp_sensor_read+0x80>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <temp_sensor_read+0x80>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	01c9      	lsls	r1, r1, #7
 8001164:	430a      	orrs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]
  // wait for RXNE==1
  // write to LEDs
  return temperature_value;
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40005800 	.word	0x40005800
 8001178:	0000270f 	.word	0x0000270f

0800117c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001180:	f7ff fe96 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011aa:	f001 ff71 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fb53 	bl	8000858 <main>

080011b2 <LoopForever>:

LoopForever:
    b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   r0, =_estack
 80011b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011c0:	08003a84 	.word	0x08003a84
  ldr r2, =_sbss
 80011c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c8:	200002a0 	.word	0x200002a0

080011cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_COMP_IRQHandler>
	...

080011d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_Init+0x24>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_Init+0x24>)
 80011da:	2110      	movs	r1, #16
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f809 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e6:	f7ff fd9f 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_InitTick+0x5c>)
 8001202:	681c      	ldr	r4, [r3, #0]
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	0019      	movs	r1, r3
 800120a:	23fa      	movs	r3, #250	; 0xfa
 800120c:	0098      	lsls	r0, r3, #2
 800120e:	f7fe ff85 	bl	800011c <__udivsi3>
 8001212:	0003      	movs	r3, r0
 8001214:	0019      	movs	r1, r3
 8001216:	0020      	movs	r0, r4
 8001218:	f7fe ff80 	bl	800011c <__udivsi3>
 800121c:	0003      	movs	r3, r0
 800121e:	0018      	movs	r0, r3
 8001220:	f000 fc37 	bl	8001a92 <HAL_SYSTICK_Config>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e00f      	b.n	800124c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d80b      	bhi.n	800124a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fc14 	bl	8001a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_InitTick+0x64>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b003      	add	sp, #12
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	18d2      	adds	r2, r2, r3
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	20000008 	.word	0x20000008
 8001280:	2000028c 	.word	0x2000028c

08001284 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	2000028c 	.word	0x2000028c

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	001a      	movs	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	189b      	adds	r3, r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e125      	b.n	800154a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10a      	bne.n	800131c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2234      	movs	r2, #52	; 0x34
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff fd2a 	bl	8000d70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	2210      	movs	r2, #16
 8001322:	4013      	ands	r3, r2
 8001324:	d000      	beq.n	8001328 <HAL_ADC_Init+0x48>
 8001326:	e103      	b.n	8001530 <HAL_ADC_Init+0x250>
 8001328:	230f      	movs	r3, #15
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d000      	beq.n	8001334 <HAL_ADC_Init+0x54>
 8001332:	e0fd      	b.n	8001530 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800133e:	d000      	beq.n	8001342 <HAL_ADC_Init+0x62>
 8001340:	e0f6      	b.n	8001530 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	4a83      	ldr	r2, [pc, #524]	; (8001554 <HAL_ADC_Init+0x274>)
 8001348:	4013      	ands	r3, r2
 800134a:	2202      	movs	r2, #2
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	2b01      	cmp	r3, #1
 800135e:	d112      	bne.n	8001386 <HAL_ADC_Init+0xa6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	2b01      	cmp	r3, #1
 800136c:	d009      	beq.n	8001382 <HAL_ADC_Init+0xa2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	401a      	ands	r2, r3
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	429a      	cmp	r2, r3
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Init+0xa6>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_ADC_Init+0xa8>
 8001386:	2300      	movs	r3, #0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d116      	bne.n	80013ba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2218      	movs	r2, #24
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	0899      	lsrs	r1, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4964      	ldr	r1, [pc, #400]	; (8001558 <HAL_ADC_Init+0x278>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
 80013ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7e5b      	ldrb	r3, [r3, #25]
 80013d4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e9b      	ldrb	r3, [r3, #26]
 80013dc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013de:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d002      	beq.n	80013ee <HAL_ADC_Init+0x10e>
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_Init+0x110>
 80013ee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013f0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013f6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_Init+0x124>
 8001400:	2304      	movs	r3, #4
 8001402:	e000      	b.n	8001406 <HAL_ADC_Init+0x126>
 8001404:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001406:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2124      	movs	r1, #36	; 0x24
 800140c:	5c5b      	ldrb	r3, [r3, r1]
 800140e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001410:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4313      	orrs	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7edb      	ldrb	r3, [r3, #27]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d115      	bne.n	800144c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e9b      	ldrb	r3, [r3, #26]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0252      	lsls	r2, r2, #9
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	e00b      	b.n	800144c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	2220      	movs	r2, #32
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001444:	2201      	movs	r2, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	23c2      	movs	r3, #194	; 0xc2
 8001452:	33ff      	adds	r3, #255	; 0xff
 8001454:	429a      	cmp	r2, r3
 8001456:	d007      	beq.n	8001468 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001460:	4313      	orrs	r3, r2
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	4313      	orrs	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	430a      	orrs	r2, r1
 8001476:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	055b      	lsls	r3, r3, #21
 8001480:	429a      	cmp	r2, r3
 8001482:	d01b      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b01      	cmp	r3, #1
 800148a:	d017      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b02      	cmp	r3, #2
 8001492:	d013      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b03      	cmp	r3, #3
 800149a:	d00f      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d00b      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d007      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d003      	beq.n	80014bc <HAL_ADC_Init+0x1dc>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	d112      	bne.n	80014e2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2107      	movs	r1, #7
 80014c8:	438a      	bics	r2, r1
 80014ca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6959      	ldr	r1, [r3, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	2207      	movs	r2, #7
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_ADC_Init+0x27c>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d10b      	bne.n	800150a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	2203      	movs	r2, #3
 80014fe:	4393      	bics	r3, r2
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001508:	e01c      	b.n	8001544 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	2212      	movs	r2, #18
 8001510:	4393      	bics	r3, r2
 8001512:	2210      	movs	r2, #16
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151e:	2201      	movs	r2, #1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800152e:	e009      	b.n	8001544 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	2210      	movs	r2, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	fffffefd 	.word	0xfffffefd
 8001558:	fffe0219 	.word	0xfffe0219
 800155c:	833fffe7 	.word	0x833fffe7

08001560 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	230f      	movs	r3, #15
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d138      	bne.n	80015ee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2234      	movs	r2, #52	; 0x34
 8001580:	5c9b      	ldrb	r3, [r3, r2]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_Start+0x2a>
 8001586:	2302      	movs	r3, #2
 8001588:	e038      	b.n	80015fc <HAL_ADC_Start+0x9c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2234      	movs	r2, #52	; 0x34
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e5b      	ldrb	r3, [r3, #25]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d007      	beq.n	80015aa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800159a:	230f      	movs	r3, #15
 800159c:	18fc      	adds	r4, r7, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f94b 	bl	800183c <ADC_Enable>
 80015a6:	0003      	movs	r3, r0
 80015a8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015aa:	230f      	movs	r3, #15
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d120      	bne.n	80015f6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_ADC_Start+0xa4>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0052      	lsls	r2, r2, #1
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2234      	movs	r2, #52	; 0x34
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	221c      	movs	r2, #28
 80015da:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2104      	movs	r1, #4
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e003      	b.n	80015f6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015ee:	230f      	movs	r3, #15
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015f6:	230f      	movs	r3, #15
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b005      	add	sp, #20
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	fffff0fe 	.word	0xfffff0fe

08001608 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	230f      	movs	r3, #15
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	055b      	lsls	r3, r3, #21
 800163e:	429a      	cmp	r2, r3
 8001640:	d011      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d00d      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	2b02      	cmp	r3, #2
 8001650:	d009      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	2b03      	cmp	r3, #3
 8001658:	d005      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	2b04      	cmp	r3, #4
 8001660:	d001      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2234      	movs	r2, #52	; 0x34
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x54>
 8001670:	2302      	movs	r3, #2
 8001672:	e0d0      	b.n	8001816 <HAL_ADC_ConfigChannel+0x1f6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2234      	movs	r2, #52	; 0x34
 8001678:	2101      	movs	r1, #1
 800167a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d000      	beq.n	800168a <HAL_ADC_ConfigChannel+0x6a>
 8001688:	e0b4      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a64      	ldr	r2, [pc, #400]	; (8001820 <HAL_ADC_ConfigChannel+0x200>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x76>
 8001694:	e082      	b.n	800179c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d037      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d033      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d02f      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d02b      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d027      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d023      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d01f      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d01b      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2107      	movs	r1, #7
 80016fc:	400b      	ands	r3, r1
 80016fe:	429a      	cmp	r2, r3
 8001700:	d012      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2107      	movs	r1, #7
 800170e:	438a      	bics	r2, r1
 8001710:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6959      	ldr	r1, [r3, #20]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2207      	movs	r2, #7
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d007      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x120>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b11      	cmp	r3, #17
 8001736:	d003      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x120>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d163      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d009      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x140>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b11      	cmp	r3, #17
 8001752:	d102      	bne.n	800175a <HAL_ADC_ConfigChannel+0x13a>
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	03db      	lsls	r3, r3, #15
 8001758:	e004      	b.n	8001764 <HAL_ADC_ConfigChannel+0x144>
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	045b      	lsls	r3, r3, #17
 800175e:	e001      	b.n	8001764 <HAL_ADC_ConfigChannel+0x144>
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 8001766:	430b      	orrs	r3, r1
 8001768:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d14a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_ADC_ConfigChannel+0x208>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <HAL_ADC_ConfigChannel+0x20c>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe fccf 	bl	800011c <__udivsi3>
 800177e:	0003      	movs	r3, r0
 8001780:	001a      	movs	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	189b      	adds	r3, r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800178c:	e002      	b.n	8001794 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_ConfigChannel+0x16e>
 800179a:	e035      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4099      	lsls	r1, r3
 80017aa:	000b      	movs	r3, r1
 80017ac:	43d9      	mvns	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d007      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1ae>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b11      	cmp	r3, #17
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1ae>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d11c      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d007      	beq.n	80017ea <HAL_ADC_ConfigChannel+0x1ca>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x1c6>
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x210>)
 80017e4:	e002      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x214>)
 80017e8:	e000      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_ADC_ConfigChannel+0x218>)
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 80017ee:	400b      	ands	r3, r1
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e009      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	2220      	movs	r2, #32
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2234      	movs	r2, #52	; 0x34
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	00001001 	.word	0x00001001
 8001824:	40012708 	.word	0x40012708
 8001828:	20000000 	.word	0x20000000
 800182c:	000f4240 	.word	0x000f4240
 8001830:	ffbfffff 	.word	0xffbfffff
 8001834:	feffffff 	.word	0xfeffffff
 8001838:	ff7fffff 	.word	0xff7fffff

0800183c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2203      	movs	r2, #3
 8001854:	4013      	ands	r3, r2
 8001856:	2b01      	cmp	r3, #1
 8001858:	d112      	bne.n	8001880 <ADC_Enable+0x44>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	2b01      	cmp	r3, #1
 8001866:	d009      	beq.n	800187c <ADC_Enable+0x40>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	401a      	ands	r2, r3
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	429a      	cmp	r2, r3
 800187a:	d101      	bne.n	8001880 <ADC_Enable+0x44>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <ADC_Enable+0x46>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d152      	bne.n	800192c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <ADC_Enable+0xfc>)
 800188e:	4013      	ands	r3, r2
 8001890:	d00d      	beq.n	80018ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	2210      	movs	r2, #16
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	2201      	movs	r2, #1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e03f      	b.n	800192e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <ADC_Enable+0x100>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	491f      	ldr	r1, [pc, #124]	; (8001940 <ADC_Enable+0x104>)
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7fe fc29 	bl	800011c <__udivsi3>
 80018ca:	0003      	movs	r3, r0
 80018cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018ce:	e002      	b.n	80018d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fcd2 	bl	8001284 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018e4:	e01b      	b.n	800191e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fccd 	bl	8001284 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d914      	bls.n	800191e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d00d      	beq.n	800191e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	2210      	movs	r2, #16
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	2201      	movs	r2, #1
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	2b01      	cmp	r3, #1
 800192a:	d1dc      	bne.n	80018e6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	80000017 	.word	0x80000017
 800193c:	20000000 	.word	0x20000000
 8001940:	000f4240 	.word	0x000f4240

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	0002      	movs	r2, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b7f      	cmp	r3, #127	; 0x7f
 8001958:	d828      	bhi.n	80019ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <__NVIC_SetPriority+0xd4>)
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	33c0      	adds	r3, #192	; 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	589b      	ldr	r3, [r3, r2]
 800196a:	1dfa      	adds	r2, r7, #7
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	0011      	movs	r1, r2
 8001970:	2203      	movs	r2, #3
 8001972:	400a      	ands	r2, r1
 8001974:	00d2      	lsls	r2, r2, #3
 8001976:	21ff      	movs	r1, #255	; 0xff
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	43d2      	mvns	r2, r2
 800197e:	401a      	ands	r2, r3
 8001980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	401a      	ands	r2, r3
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	2303      	movs	r3, #3
 8001992:	4003      	ands	r3, r0
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001998:	481f      	ldr	r0, [pc, #124]	; (8001a18 <__NVIC_SetPriority+0xd4>)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	430a      	orrs	r2, r1
 80019a4:	33c0      	adds	r3, #192	; 0xc0
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019aa:	e031      	b.n	8001a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <__NVIC_SetPriority+0xd8>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	0019      	movs	r1, r3
 80019b4:	230f      	movs	r3, #15
 80019b6:	400b      	ands	r3, r1
 80019b8:	3b08      	subs	r3, #8
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3306      	adds	r3, #6
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1dfa      	adds	r2, r7, #7
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	0011      	movs	r1, r2
 80019cc:	2203      	movs	r2, #3
 80019ce:	400a      	ands	r2, r1
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	4091      	lsls	r1, r2
 80019d6:	000a      	movs	r2, r1
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	401a      	ands	r2, r3
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	2303      	movs	r3, #3
 80019ee:	4003      	ands	r3, r0
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <__NVIC_SetPriority+0xd8>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	001c      	movs	r4, r3
 80019fc:	230f      	movs	r3, #15
 80019fe:	4023      	ands	r3, r4
 8001a00:	3b08      	subs	r3, #8
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	430a      	orrs	r2, r1
 8001a06:	3306      	adds	r3, #6
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	18c3      	adds	r3, r0, r3
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b003      	add	sp, #12
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	045b      	lsls	r3, r3, #17
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d301      	bcc.n	8001a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a34:	2301      	movs	r3, #1
 8001a36:	e010      	b.n	8001a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <SysTick_Config+0x44>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a40:	2301      	movs	r3, #1
 8001a42:	425b      	negs	r3, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff ff7c 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x44>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x44>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	210f      	movs	r1, #15
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	1c02      	adds	r2, r0, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ffbf 	bl	8001a20 <SysTick_Config>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e020      	b.n	8001b14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	210e      	movs	r1, #14
 8001ade:	438a      	bics	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2101      	movs	r1, #1
 8001afc:	4091      	lsls	r1, r2
 8001afe:	000a      	movs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2221      	movs	r2, #33	; 0x21
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	2100      	movs	r1, #0
 8001b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	210f      	movs	r1, #15
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2221      	movs	r2, #33	; 0x21
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d006      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e028      	b.n	8001b98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	210e      	movs	r1, #14
 8001b52:	438a      	bics	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	438a      	bics	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4091      	lsls	r1, r2
 8001b72:	000a      	movs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2221      	movs	r2, #33	; 0x21
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	0010      	movs	r0, r2
 8001b96:	4798      	blx	r3
    }
  }
  return status;
 8001b98:	230f      	movs	r3, #15
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	781b      	ldrb	r3, [r3, #0]
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e14f      	b.n	8001e58 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <HAL_GPIO_Init+0x28>
 8001bce:	e140      	b.n	8001e52 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d005      	beq.n	8001be8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d130      	bne.n	8001c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	2201      	movs	r2, #1
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d017      	beq.n	8001c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d123      	bne.n	8001cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	58d3      	ldr	r3, [r2, r3]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2107      	movs	r1, #7
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x174>
 8001d1a:	e09a      	b.n	8001e52 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1c:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d34:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	589b      	ldr	r3, [r3, r2]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2203      	movs	r2, #3
 8001d46:	4013      	ands	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	0013      	movs	r3, r2
 8001d50:	43da      	mvns	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	2390      	movs	r3, #144	; 0x90
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x1de>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <HAL_GPIO_Init+0x2d4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x1da>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_GPIO_Init+0x2d8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x1d6>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	2103      	movs	r1, #3
 8001d90:	400a      	ands	r2, r1
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	035b      	lsls	r3, r3, #13
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	039b      	lsls	r3, r3, #14
 8001dec:	4013      	ands	r3, r2
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	1e13      	subs	r3, r2, #0
 8001e62:	d000      	beq.n	8001e66 <HAL_GPIO_Init+0x2be>
 8001e64:	e6a8      	b.n	8001bb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	48000c00 	.word	0x48000c00
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	0008      	movs	r0, r1
 8001e92:	0011      	movs	r1, r2
 8001e94:	1cbb      	adds	r3, r7, #2
 8001e96:	1c02      	adds	r2, r0, #0
 8001e98:	801a      	strh	r2, [r3, #0]
 8001e9a:	1c7b      	adds	r3, r7, #1
 8001e9c:	1c0a      	adds	r2, r1, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea0:	1c7b      	adds	r3, r7, #1
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea8:	1cbb      	adds	r3, r7, #2
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb2:	1cbb      	adds	r3, r7, #2
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	000a      	movs	r2, r1
 8001ecc:	1cbb      	adds	r3, r7, #2
 8001ece:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed6:	1cbb      	adds	r3, r7, #2
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	1cb9      	adds	r1, r7, #2
 8001ee6:	8809      	ldrh	r1, [r1, #0]
 8001ee8:	400b      	ands	r3, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e301      	b.n	800250e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1e>
 8001f14:	e08d      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f16:	4bc3      	ldr	r3, [pc, #780]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00e      	beq.n	8001f40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f22:	4bc0      	ldr	r3, [pc, #768]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
 8001f2e:	4bbd      	ldr	r3, [pc, #756]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10d      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4bb8      	ldr	r3, [pc, #736]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_OscConfig+0x56>
 8001f4c:	e070      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d000      	beq.n	8001f58 <HAL_RCC_OscConfig+0x60>
 8001f56:	e06b      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2d8      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7c>
 8001f64:	4baf      	ldr	r3, [pc, #700]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4bae      	ldr	r3, [pc, #696]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0249      	lsls	r1, r1, #9
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e02f      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x9e>
 8001f7c:	4ba9      	ldr	r3, [pc, #676]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4ba8      	ldr	r3, [pc, #672]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	49a9      	ldr	r1, [pc, #676]	; (8002228 <HAL_RCC_OscConfig+0x330>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4ba6      	ldr	r3, [pc, #664]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba5      	ldr	r3, [pc, #660]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	49a7      	ldr	r1, [pc, #668]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e01e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0xc4>
 8001f9e:	4ba1      	ldr	r3, [pc, #644]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba0      	ldr	r3, [pc, #640]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	02c9      	lsls	r1, r1, #11
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b9d      	ldr	r3, [pc, #628]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001fbc:	4b99      	ldr	r3, [pc, #612]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	4999      	ldr	r1, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b96      	ldr	r3, [pc, #600]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b95      	ldr	r3, [pc, #596]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	4997      	ldr	r1, [pc, #604]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d014      	beq.n	8002006 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f952 	bl	8001284 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f94d 	bl	8001284 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e28a      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xee>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f93d 	bl	8001284 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f938 	bl	8001284 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e275      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x118>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_RCC_OscConfig+0x146>
 800203c:	e069      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800203e:	4b79      	ldr	r3, [pc, #484]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	220c      	movs	r2, #12
 8002044:	4013      	ands	r3, r2
 8002046:	d00b      	beq.n	8002060 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	220c      	movs	r2, #12
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11c      	bne.n	800208e <HAL_RCC_OscConfig+0x196>
 8002054:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	025b      	lsls	r3, r3, #9
 800205c:	4013      	ands	r3, r2
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002060:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e24b      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	22f8      	movs	r2, #248	; 0xf8
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00da      	lsls	r2, r3, #3
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	e041      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d024      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff f8ef 	bl	8001284 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f8ea 	bl	8001284 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e227      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f8ca 	bl	8001284 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff f8c5 	bl	8001284 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e202      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d1f1      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2208      	movs	r2, #8
 8002118:	4013      	ands	r3, r2
 800211a:	d036      	beq.n	800218a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff f8a8 	bl	8001284 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff f8a3 	bl	8001284 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1e0      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d0f1      	beq.n	800213a <HAL_RCC_OscConfig+0x242>
 8002156:	e018      	b.n	800218a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f88e 	bl	8001284 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff f889 	bl	8001284 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1c6      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x29e>
 8002194:	e0b4      	b.n	8002300 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	201f      	movs	r0, #31
 8002198:	183b      	adds	r3, r7, r0
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	4013      	ands	r3, r2
 80021a8:	d110      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	0549      	lsls	r1, r1, #21
 80021b4:	430a      	orrs	r2, r1
 80021b6:	61da      	str	r2, [r3, #28]
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021c6:	183b      	adds	r3, r7, r0
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d11a      	bne.n	800220e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0049      	lsls	r1, r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f84d 	bl	8001284 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7ff f848 	bl	8001284 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e185      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10e      	bne.n	8002234 <HAL_RCC_OscConfig+0x33c>
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	621a      	str	r2, [r3, #32]
 8002222:	e035      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002224:	40021000 	.word	0x40021000
 8002228:	fffeffff 	.word	0xfffeffff
 800222c:	fffbffff 	.word	0xfffbffff
 8002230:	40007000 	.word	0x40007000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x35e>
 800223c:	4bb6      	ldr	r3, [pc, #728]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	4bb5      	ldr	r3, [pc, #724]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002242:	2101      	movs	r1, #1
 8002244:	438a      	bics	r2, r1
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	4bb3      	ldr	r3, [pc, #716]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4bb2      	ldr	r3, [pc, #712]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800224e:	2104      	movs	r1, #4
 8002250:	438a      	bics	r2, r1
 8002252:	621a      	str	r2, [r3, #32]
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x380>
 800225e:	4bae      	ldr	r3, [pc, #696]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	4bad      	ldr	r3, [pc, #692]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002264:	2104      	movs	r1, #4
 8002266:	430a      	orrs	r2, r1
 8002268:	621a      	str	r2, [r3, #32]
 800226a:	4bab      	ldr	r3, [pc, #684]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	621a      	str	r2, [r3, #32]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002278:	4ba7      	ldr	r3, [pc, #668]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4ba6      	ldr	r3, [pc, #664]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4ba3      	ldr	r3, [pc, #652]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800228a:	2104      	movs	r1, #4
 800228c:	438a      	bics	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe fff4 	bl	8001284 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe ffef 	bl	8001284 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a9b      	ldr	r2, [pc, #620]	; (800251c <HAL_RCC_OscConfig+0x624>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e12b      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	4b98      	ldr	r3, [pc, #608]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
 80022c0:	e013      	b.n	80022ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe ffdf 	bl	8001284 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	e009      	b.n	80022e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe ffda 	bl	8001284 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a91      	ldr	r2, [pc, #580]	; (800251c <HAL_RCC_OscConfig+0x624>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e116      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ea:	231f      	movs	r3, #31
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b88      	ldr	r3, [pc, #544]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	4b87      	ldr	r3, [pc, #540]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022fa:	4989      	ldr	r1, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2210      	movs	r2, #16
 8002306:	4013      	ands	r3, r2
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d12a      	bne.n	8002368 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	4b80      	ldr	r3, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002318:	2104      	movs	r1, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800231e:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002322:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7fe ffab 	bl	8001284 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002334:	f7fe ffa6 	bl	8001284 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0e3      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d0f1      	beq.n	8002334 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002350:	4b71      	ldr	r3, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	22f8      	movs	r2, #248	; 0xf8
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	00da      	lsls	r2, r3, #3
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002362:	430a      	orrs	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
 8002366:	e034      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	3305      	adds	r3, #5
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002370:	4b69      	ldr	r3, [pc, #420]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002376:	2104      	movs	r1, #4
 8002378:	438a      	bics	r2, r1
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	22f8      	movs	r2, #248	; 0xf8
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	00da      	lsls	r2, r3, #3
 800238c:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
 8002392:	e01e      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002394:	4b60      	ldr	r3, [pc, #384]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800239a:	2104      	movs	r1, #4
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe ff6a 	bl	8001284 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023b6:	f7fe ff65 	bl	8001284 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0a2      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f1      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x4e4>
 80023da:	e097      	b.n	800250c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	220c      	movs	r2, #12
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d100      	bne.n	80023ea <HAL_RCC_OscConfig+0x4f2>
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d14c      	bne.n	800248c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023f8:	494a      	ldr	r1, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe ff41 	bl	8001284 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ff3c 	bl	8001284 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e079      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	4013      	ands	r3, r2
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	220f      	movs	r2, #15
 800242c:	4393      	bics	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x630>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	431a      	orrs	r2, r3
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	0449      	lsls	r1, r1, #17
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7fe ff0f 	bl	8001284 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe ff0a 	bl	8001284 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e047      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	4013      	ands	r3, r2
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x574>
 800248a:	e03f      	b.n	800250c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002492:	4924      	ldr	r1, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fef4 	bl	8001284 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe feef 	bl	8001284 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e02c      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	049b      	lsls	r3, r3, #18
 80024bc:	4013      	ands	r3, r2
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x5aa>
 80024c0:	e024      	b.n	800250c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e01f      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10e      	bne.n	8002508 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	220f      	movs	r2, #15
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	23f0      	movs	r3, #240	; 0xf0
 80024fc:	039b      	lsls	r3, r3, #14
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b008      	add	sp, #32
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40021000 	.word	0x40021000
 800251c:	00001388 	.word	0x00001388
 8002520:	efffffff 	.word	0xefffffff
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	ffc2ffff 	.word	0xffc2ffff

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b3      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d911      	bls.n	8002572 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	4393      	bics	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e09a      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	d015      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2204      	movs	r2, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d006      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 800258c:	21e0      	movs	r1, #224	; 0xe0
 800258e:	00c9      	lsls	r1, r1, #3
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	22f0      	movs	r2, #240	; 0xf0
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d040      	beq.n	8002634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	4013      	ands	r3, r2
 80025c4:	d114      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06e      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	049b      	lsls	r3, r3, #18
 80025da:	4013      	ands	r3, r2
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e062      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e05b      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7fe fe3e 	bl	8001284 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	e009      	b.n	8002622 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe fe39 	bl	8001284 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x18c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e042      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	220c      	movs	r2, #12
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1ec      	bne.n	800260e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	4013      	ands	r3, r2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d211      	bcs.n	8002666 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e020      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2204      	movs	r2, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_RCC_ClockConfig+0x190>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002684:	f000 f820 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002688:	0001      	movs	r1, r0
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	220f      	movs	r2, #15
 8002692:	4013      	ands	r3, r2
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x194>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	000a      	movs	r2, r1
 800269a:	40da      	lsrs	r2, r3
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x198>)
 800269e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f7fe fda9 	bl	80011f8 <HAL_InitTick>
  
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	00001388 	.word	0x00001388
 80026bc:	fffff8ff 	.word	0xfffff8ff
 80026c0:	08003a18 	.word	0x08003a18
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	220c      	movs	r2, #12
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
 80026f6:	e02c      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026fa:	613b      	str	r3, [r7, #16]
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	220f      	movs	r2, #15
 8002704:	4013      	ands	r3, r2
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	220f      	movs	r2, #15
 8002712:	4013      	ands	r3, r2
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	4810      	ldr	r0, [pc, #64]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002728:	f7fd fcf8 	bl	800011c <__udivsi3>
 800272c:	0003      	movs	r3, r0
 800272e:	001a      	movs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4353      	muls	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e009      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	000a      	movs	r2, r1
 800273c:	0152      	lsls	r2, r2, #5
 800273e:	1a52      	subs	r2, r2, r1
 8002740:	0193      	lsls	r3, r2, #6
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	185b      	adds	r3, r3, r1
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
      break;
 8002750:	e002      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002754:	613b      	str	r3, [r7, #16]
      break;
 8002756:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002758:	693b      	ldr	r3, [r7, #16]
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b006      	add	sp, #24
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40021000 	.word	0x40021000
 8002768:	007a1200 	.word	0x007a1200
 800276c:	08003a28 	.word	0x08003a28
 8002770:	08003a38 	.word	0x08003a38

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	025b      	lsls	r3, r3, #9
 800278c:	4013      	ands	r3, r2
 800278e:	d100      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002790:	e08e      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2017      	movs	r0, #23
 8002794:	183b      	adds	r3, r7, r0
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	055b      	lsls	r3, r3, #21
 80027a2:	4013      	ands	r3, r2
 80027a4:	d110      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	4b5b      	ldr	r3, [pc, #364]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0549      	lsls	r1, r1, #21
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	055b      	lsls	r3, r3, #21
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	183b      	adds	r3, r7, r0
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d11a      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d4:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	0049      	lsls	r1, r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fd4f 	bl	8001284 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	e008      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ec:	f7fe fd4a 	bl	8001284 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e087      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4013      	ands	r3, r2
 8002808:	d0f0      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	23c0      	movs	r3, #192	; 0xc0
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d034      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4013      	ands	r3, r2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d02c      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a3b      	ldr	r2, [pc, #236]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0249      	lsls	r1, r1, #9
 8002840:	430a      	orrs	r2, r1
 8002842:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800284a:	4936      	ldr	r1, [pc, #216]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800284c:	400a      	ands	r2, r1
 800284e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fd11 	bl	8001284 <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fd0c 	bl	8001284 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e048      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	d0f0      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800288c:	4013      	ands	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002896:	430a      	orrs	r2, r1
 8002898:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289a:	2317      	movs	r3, #23
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028aa:	4920      	ldr	r1, [pc, #128]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	2203      	movs	r2, #3
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2220      	movs	r2, #32
 80028d4:	4013      	ands	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	2210      	movs	r2, #16
 80028de:	4393      	bics	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	4393      	bics	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002908:	430a      	orrs	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b006      	add	sp, #24
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	fffffcff 	.word	0xfffffcff
 8002924:	fffeffff 	.word	0xfffeffff
 8002928:	00001388 	.word	0x00001388
 800292c:	efffffff 	.word	0xefffffff

08002930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b0ab      	sub	sp, #172	; 0xac
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	22a4      	movs	r2, #164	; 0xa4
 8002940:	18b9      	adds	r1, r7, r2
 8002942:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	20a0      	movs	r0, #160	; 0xa0
 800294c:	1839      	adds	r1, r7, r0
 800294e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	219c      	movs	r1, #156	; 0x9c
 8002958:	1879      	adds	r1, r7, r1
 800295a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800295c:	0011      	movs	r1, r2
 800295e:	18bb      	adds	r3, r7, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a99      	ldr	r2, [pc, #612]	; (8002bc8 <HAL_UART_IRQHandler+0x298>)
 8002964:	4013      	ands	r3, r2
 8002966:	2298      	movs	r2, #152	; 0x98
 8002968:	18bc      	adds	r4, r7, r2
 800296a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800296c:	18bb      	adds	r3, r7, r2
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d114      	bne.n	800299e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002974:	187b      	adds	r3, r7, r1
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2220      	movs	r2, #32
 800297a:	4013      	ands	r3, r2
 800297c:	d00f      	beq.n	800299e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800297e:	183b      	adds	r3, r7, r0
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	4013      	ands	r3, r2
 8002986:	d00a      	beq.n	800299e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298c:	2b00      	cmp	r3, #0
 800298e:	d100      	bne.n	8002992 <HAL_UART_IRQHandler+0x62>
 8002990:	e29e      	b.n	8002ed0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	0010      	movs	r0, r2
 800299a:	4798      	blx	r3
      }
      return;
 800299c:	e298      	b.n	8002ed0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800299e:	2398      	movs	r3, #152	; 0x98
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d100      	bne.n	80029aa <HAL_UART_IRQHandler+0x7a>
 80029a8:	e114      	b.n	8002bd4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029aa:	239c      	movs	r3, #156	; 0x9c
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029b6:	23a0      	movs	r3, #160	; 0xa0
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_UART_IRQHandler+0x29c>)
 80029be:	4013      	ands	r3, r2
 80029c0:	d100      	bne.n	80029c4 <HAL_UART_IRQHandler+0x94>
 80029c2:	e107      	b.n	8002bd4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029c4:	23a4      	movs	r3, #164	; 0xa4
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d012      	beq.n	80029f6 <HAL_UART_IRQHandler+0xc6>
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2201      	movs	r2, #1
 80029e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2284      	movs	r2, #132	; 0x84
 80029ea:	589b      	ldr	r3, [r3, r2]
 80029ec:	2201      	movs	r2, #1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2184      	movs	r1, #132	; 0x84
 80029f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f6:	23a4      	movs	r3, #164	; 0xa4
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2202      	movs	r2, #2
 80029fe:	4013      	ands	r3, r2
 8002a00:	d011      	beq.n	8002a26 <HAL_UART_IRQHandler+0xf6>
 8002a02:	239c      	movs	r3, #156	; 0x9c
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2202      	movs	r2, #2
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2284      	movs	r2, #132	; 0x84
 8002a1a:	589b      	ldr	r3, [r3, r2]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2184      	movs	r1, #132	; 0x84
 8002a24:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a26:	23a4      	movs	r3, #164	; 0xa4
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d011      	beq.n	8002a56 <HAL_UART_IRQHandler+0x126>
 8002a32:	239c      	movs	r3, #156	; 0x9c
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2204      	movs	r2, #4
 8002a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2284      	movs	r2, #132	; 0x84
 8002a4a:	589b      	ldr	r3, [r3, r2]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2184      	movs	r1, #132	; 0x84
 8002a54:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a56:	23a4      	movs	r3, #164	; 0xa4
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d017      	beq.n	8002a92 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a62:	23a0      	movs	r3, #160	; 0xa0
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d105      	bne.n	8002a7a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a6e:	239c      	movs	r3, #156	; 0x9c
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2201      	movs	r2, #1
 8002a76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a78:	d00b      	beq.n	8002a92 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2284      	movs	r2, #132	; 0x84
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2184      	movs	r1, #132	; 0x84
 8002a90:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a92:	23a4      	movs	r3, #164	; 0xa4
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x198>
 8002aa0:	23a0      	movs	r3, #160	; 0xa0
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	04db      	lsls	r3, r3, #19
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d00c      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2284      	movs	r2, #132	; 0x84
 8002abc:	589b      	ldr	r3, [r3, r2]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2184      	movs	r1, #132	; 0x84
 8002ac6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2284      	movs	r2, #132	; 0x84
 8002acc:	589b      	ldr	r3, [r3, r2]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d100      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x1a4>
 8002ad2:	e1ff      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad4:	23a4      	movs	r3, #164	; 0xa4
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2220      	movs	r2, #32
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ae0:	23a0      	movs	r3, #160	; 0xa0
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d008      	beq.n	8002afe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	0010      	movs	r0, r2
 8002afc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2284      	movs	r2, #132	; 0x84
 8002b02:	589b      	ldr	r3, [r3, r2]
 8002b04:	2194      	movs	r1, #148	; 0x94
 8002b06:	187a      	adds	r2, r7, r1
 8002b08:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d004      	beq.n	8002b22 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b20:	d047      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f9ff 	bl	8002f28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d137      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b38:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b40:	2090      	movs	r0, #144	; 0x90
 8002b42:	183a      	adds	r2, r7, r0
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b4c:	f383 8810 	msr	PRIMASK, r3
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	438a      	bics	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_UART_IRQHandler+0x2a0>)
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fe ffc9 	bl	8001b1c <HAL_DMA_Abort_IT>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	0018      	movs	r0, r3
 8002b9a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	e012      	b.n	8002bc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f9ad 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba6:	e00d      	b.n	8002bc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f9a8 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	e008      	b.n	8002bc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f000 f9a3 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2284      	movs	r2, #132	; 0x84
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002bc2:	e187      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	46c0      	nop			; (mov r8, r8)
    return;
 8002bc6:	e185      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a4>
 8002bc8:	0000080f 	.word	0x0000080f
 8002bcc:	04000120 	.word	0x04000120
 8002bd0:	08002ff1 	.word	0x08002ff1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d000      	beq.n	8002bde <HAL_UART_IRQHandler+0x2ae>
 8002bdc:	e139      	b.n	8002e52 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bde:	23a4      	movs	r3, #164	; 0xa4
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	4013      	ands	r3, r2
 8002be8:	d100      	bne.n	8002bec <HAL_UART_IRQHandler+0x2bc>
 8002bea:	e132      	b.n	8002e52 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bec:	23a0      	movs	r3, #160	; 0xa0
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_UART_IRQHandler+0x2ca>
 8002bf8:	e12b      	b.n	8002e52 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2240      	movs	r2, #64	; 0x40
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d000      	beq.n	8002c12 <HAL_UART_IRQHandler+0x2e2>
 8002c10:	e09f      	b.n	8002d52 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	217e      	movs	r1, #126	; 0x7e
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d100      	bne.n	8002c2a <HAL_UART_IRQHandler+0x2fa>
 8002c28:	e156      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2258      	movs	r2, #88	; 0x58
 8002c2e:	5a9b      	ldrh	r3, [r3, r2]
 8002c30:	187a      	adds	r2, r7, r1
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d300      	bcc.n	8002c3a <HAL_UART_IRQHandler+0x30a>
 8002c38:	e14e      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	187a      	adds	r2, r7, r1
 8002c3e:	215a      	movs	r1, #90	; 0x5a
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d06f      	beq.n	8002d2e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c56:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c58:	2301      	movs	r3, #1
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	499e      	ldr	r1, [pc, #632]	; (8002ee8 <HAL_UART_IRQHandler+0x5b8>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c80:	f3ef 8310 	mrs	r3, PRIMASK
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c90:	f383 8810 	msr	PRIMASK, r3
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	673b      	str	r3, [r7, #112]	; 0x70
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc2:	f383 8810 	msr	PRIMASK, r3
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	2120      	movs	r1, #32
 8002cea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2110      	movs	r1, #16
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe febf 	bl	8001aac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2258      	movs	r2, #88	; 0x58
 8002d38:	5a9a      	ldrh	r2, [r3, r2]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	215a      	movs	r1, #90	; 0x5a
 8002d3e:	5a5b      	ldrh	r3, [r3, r1]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8e0 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d50:	e0c2      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2258      	movs	r2, #88	; 0x58
 8002d56:	5a99      	ldrh	r1, [r3, r2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	225a      	movs	r2, #90	; 0x5a
 8002d5c:	5a9b      	ldrh	r3, [r3, r2]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	208e      	movs	r0, #142	; 0x8e
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	1a8a      	subs	r2, r1, r2
 8002d66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	225a      	movs	r2, #90	; 0x5a
 8002d6c:	5a9b      	ldrh	r3, [r3, r2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x446>
 8002d74:	e0b2      	b.n	8002edc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x450>
 8002d7e:	e0ad      	b.n	8002edc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	2488      	movs	r4, #136	; 0x88
 8002d8a:	193a      	adds	r2, r7, r4
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4951      	ldr	r1, [pc, #324]	; (8002eec <HAL_UART_IRQHandler+0x5bc>)
 8002da6:	400a      	ands	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	2484      	movs	r4, #132	; 0x84
 8002dc2:	193a      	adds	r2, r7, r4
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	438a      	bics	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	2120      	movs	r1, #32
 8002df6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0c:	2480      	movs	r4, #128	; 0x80
 8002e0e:	193a      	adds	r2, r7, r4
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2110      	movs	r1, #16
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f860 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e50:	e044      	b.n	8002edc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e52:	23a4      	movs	r3, #164	; 0xa4
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	035b      	lsls	r3, r3, #13
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d010      	beq.n	8002e82 <HAL_UART_IRQHandler+0x552>
 8002e60:	239c      	movs	r3, #156	; 0x9c
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	03db      	lsls	r3, r3, #15
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0352      	lsls	r2, r2, #13
 8002e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f8fa 	bl	8003074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e80:	e02f      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e82:	23a4      	movs	r3, #164	; 0xa4
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d00f      	beq.n	8002eae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e8e:	23a0      	movs	r3, #160	; 0xa0
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	4013      	ands	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01e      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	4798      	blx	r3
    }
    return;
 8002eac:	e018      	b.n	8002ee0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eae:	23a4      	movs	r3, #164	; 0xa4
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2240      	movs	r2, #64	; 0x40
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
 8002eba:	23a0      	movs	r3, #160	; 0xa0
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2240      	movs	r2, #64	; 0x40
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f8a8 	bl	800301e <UART_EndTransmit_IT>
    return;
 8002ece:	e008      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	e006      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	e004      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	e002      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002ee0:	46c0      	nop			; (mov r8, r8)
  }

}
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b02b      	add	sp, #172	; 0xac
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	fffffeff 	.word	0xfffffeff
 8002eec:	fffffedf 	.word	0xfffffedf

08002ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	000a      	movs	r2, r1
 8002f1a:	1cbb      	adds	r3, r7, #2
 8002f1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b002      	add	sp, #8
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f30:	f3ef 8310 	mrs	r3, PRIMASK
 8002f34:	617b      	str	r3, [r7, #20]
  return(result);
 8002f36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f383 8810 	msr	PRIMASK, r3
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4926      	ldr	r1, [pc, #152]	; (8002fec <UART_EndRxTransfer+0xc4>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f383 8810 	msr	PRIMASK, r3
}
 8002f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	623b      	str	r3, [r7, #32]
  return(result);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	438a      	bics	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d118      	bne.n	8002fce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b00e      	add	sp, #56	; 0x38
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	fffffedf 	.word	0xfffffedf

08002ff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	225a      	movs	r2, #90	; 0x5a
 8003002:	2100      	movs	r1, #0
 8003004:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2252      	movs	r2, #82	; 0x52
 800300a:	2100      	movs	r1, #0
 800300c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff ff75 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003026:	f3ef 8310 	mrs	r3, PRIMASK
 800302a:	60bb      	str	r3, [r7, #8]
  return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	2301      	movs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	438a      	bics	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f7ff ff42 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	; (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	2000000c 	.word	0x2000000c

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	2600      	movs	r6, #0
 8003094:	4d0c      	ldr	r5, [pc, #48]	; (80030c8 <__libc_init_array+0x38>)
 8003096:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003098:	1b64      	subs	r4, r4, r5
 800309a:	10a4      	asrs	r4, r4, #2
 800309c:	42a6      	cmp	r6, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	2600      	movs	r6, #0
 80030a2:	f000 fc8b 	bl	80039bc <_init>
 80030a6:	4d0a      	ldr	r5, [pc, #40]	; (80030d0 <__libc_init_array+0x40>)
 80030a8:	4c0a      	ldr	r4, [pc, #40]	; (80030d4 <__libc_init_array+0x44>)
 80030aa:	1b64      	subs	r4, r4, r5
 80030ac:	10a4      	asrs	r4, r4, #2
 80030ae:	42a6      	cmp	r6, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	00b3      	lsls	r3, r6, #2
 80030b6:	58eb      	ldr	r3, [r5, r3]
 80030b8:	4798      	blx	r3
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	00b3      	lsls	r3, r6, #2
 80030c0:	58eb      	ldr	r3, [r5, r3]
 80030c2:	4798      	blx	r3
 80030c4:	3601      	adds	r6, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08003a7c 	.word	0x08003a7c
 80030cc:	08003a7c 	.word	0x08003a7c
 80030d0:	08003a7c 	.word	0x08003a7c
 80030d4:	08003a80 	.word	0x08003a80

080030d8 <memset>:
 80030d8:	0003      	movs	r3, r0
 80030da:	1882      	adds	r2, r0, r2
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	7019      	strb	r1, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <siprintf>:
 80030e8:	b40e      	push	{r1, r2, r3}
 80030ea:	b500      	push	{lr}
 80030ec:	490b      	ldr	r1, [pc, #44]	; (800311c <siprintf+0x34>)
 80030ee:	b09c      	sub	sp, #112	; 0x70
 80030f0:	ab1d      	add	r3, sp, #116	; 0x74
 80030f2:	9002      	str	r0, [sp, #8]
 80030f4:	9006      	str	r0, [sp, #24]
 80030f6:	9107      	str	r1, [sp, #28]
 80030f8:	9104      	str	r1, [sp, #16]
 80030fa:	4809      	ldr	r0, [pc, #36]	; (8003120 <siprintf+0x38>)
 80030fc:	4909      	ldr	r1, [pc, #36]	; (8003124 <siprintf+0x3c>)
 80030fe:	cb04      	ldmia	r3!, {r2}
 8003100:	9105      	str	r1, [sp, #20]
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	a902      	add	r1, sp, #8
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	f000 f870 	bl	80031ec <_svfiprintf_r>
 800310c:	2300      	movs	r3, #0
 800310e:	9a02      	ldr	r2, [sp, #8]
 8003110:	7013      	strb	r3, [r2, #0]
 8003112:	b01c      	add	sp, #112	; 0x70
 8003114:	bc08      	pop	{r3}
 8003116:	b003      	add	sp, #12
 8003118:	4718      	bx	r3
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	7fffffff 	.word	0x7fffffff
 8003120:	2000000c 	.word	0x2000000c
 8003124:	ffff0208 	.word	0xffff0208

08003128 <__ssputs_r>:
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	688e      	ldr	r6, [r1, #8]
 800312c:	b085      	sub	sp, #20
 800312e:	0007      	movs	r7, r0
 8003130:	000c      	movs	r4, r1
 8003132:	9203      	str	r2, [sp, #12]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	429e      	cmp	r6, r3
 8003138:	d83c      	bhi.n	80031b4 <__ssputs_r+0x8c>
 800313a:	2390      	movs	r3, #144	; 0x90
 800313c:	898a      	ldrh	r2, [r1, #12]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	421a      	tst	r2, r3
 8003142:	d034      	beq.n	80031ae <__ssputs_r+0x86>
 8003144:	6909      	ldr	r1, [r1, #16]
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	6960      	ldr	r0, [r4, #20]
 800314a:	1a5b      	subs	r3, r3, r1
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2303      	movs	r3, #3
 8003150:	4343      	muls	r3, r0
 8003152:	0fdd      	lsrs	r5, r3, #31
 8003154:	18ed      	adds	r5, r5, r3
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	9802      	ldr	r0, [sp, #8]
 800315a:	3301      	adds	r3, #1
 800315c:	181b      	adds	r3, r3, r0
 800315e:	106d      	asrs	r5, r5, #1
 8003160:	42ab      	cmp	r3, r5
 8003162:	d900      	bls.n	8003166 <__ssputs_r+0x3e>
 8003164:	001d      	movs	r5, r3
 8003166:	0553      	lsls	r3, r2, #21
 8003168:	d532      	bpl.n	80031d0 <__ssputs_r+0xa8>
 800316a:	0029      	movs	r1, r5
 800316c:	0038      	movs	r0, r7
 800316e:	f000 fb53 	bl	8003818 <_malloc_r>
 8003172:	1e06      	subs	r6, r0, #0
 8003174:	d109      	bne.n	800318a <__ssputs_r+0x62>
 8003176:	230c      	movs	r3, #12
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	2340      	movs	r3, #64	; 0x40
 800317c:	2001      	movs	r0, #1
 800317e:	89a2      	ldrh	r2, [r4, #12]
 8003180:	4240      	negs	r0, r0
 8003182:	4313      	orrs	r3, r2
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	b005      	add	sp, #20
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	9a02      	ldr	r2, [sp, #8]
 800318c:	6921      	ldr	r1, [r4, #16]
 800318e:	f000 faba 	bl	8003706 <memcpy>
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <__ssputs_r+0xc0>)
 8003196:	401a      	ands	r2, r3
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	4313      	orrs	r3, r2
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	9b02      	ldr	r3, [sp, #8]
 80031a0:	6126      	str	r6, [r4, #16]
 80031a2:	18f6      	adds	r6, r6, r3
 80031a4:	6026      	str	r6, [r4, #0]
 80031a6:	6165      	str	r5, [r4, #20]
 80031a8:	9e01      	ldr	r6, [sp, #4]
 80031aa:	1aed      	subs	r5, r5, r3
 80031ac:	60a5      	str	r5, [r4, #8]
 80031ae:	9b01      	ldr	r3, [sp, #4]
 80031b0:	429e      	cmp	r6, r3
 80031b2:	d900      	bls.n	80031b6 <__ssputs_r+0x8e>
 80031b4:	9e01      	ldr	r6, [sp, #4]
 80031b6:	0032      	movs	r2, r6
 80031b8:	9903      	ldr	r1, [sp, #12]
 80031ba:	6820      	ldr	r0, [r4, #0]
 80031bc:	f000 faac 	bl	8003718 <memmove>
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	2000      	movs	r0, #0
 80031c4:	1b9b      	subs	r3, r3, r6
 80031c6:	60a3      	str	r3, [r4, #8]
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	199e      	adds	r6, r3, r6
 80031cc:	6026      	str	r6, [r4, #0]
 80031ce:	e7da      	b.n	8003186 <__ssputs_r+0x5e>
 80031d0:	002a      	movs	r2, r5
 80031d2:	0038      	movs	r0, r7
 80031d4:	f000 fb96 	bl	8003904 <_realloc_r>
 80031d8:	1e06      	subs	r6, r0, #0
 80031da:	d1e0      	bne.n	800319e <__ssputs_r+0x76>
 80031dc:	0038      	movs	r0, r7
 80031de:	6921      	ldr	r1, [r4, #16]
 80031e0:	f000 faae 	bl	8003740 <_free_r>
 80031e4:	e7c7      	b.n	8003176 <__ssputs_r+0x4e>
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	fffffb7f 	.word	0xfffffb7f

080031ec <_svfiprintf_r>:
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b0a1      	sub	sp, #132	; 0x84
 80031f0:	9003      	str	r0, [sp, #12]
 80031f2:	001d      	movs	r5, r3
 80031f4:	898b      	ldrh	r3, [r1, #12]
 80031f6:	000f      	movs	r7, r1
 80031f8:	0016      	movs	r6, r2
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	d511      	bpl.n	8003222 <_svfiprintf_r+0x36>
 80031fe:	690b      	ldr	r3, [r1, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10e      	bne.n	8003222 <_svfiprintf_r+0x36>
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f000 fb07 	bl	8003818 <_malloc_r>
 800320a:	6038      	str	r0, [r7, #0]
 800320c:	6138      	str	r0, [r7, #16]
 800320e:	2800      	cmp	r0, #0
 8003210:	d105      	bne.n	800321e <_svfiprintf_r+0x32>
 8003212:	230c      	movs	r3, #12
 8003214:	9a03      	ldr	r2, [sp, #12]
 8003216:	3801      	subs	r0, #1
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	b021      	add	sp, #132	; 0x84
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	ac08      	add	r4, sp, #32
 8003226:	6163      	str	r3, [r4, #20]
 8003228:	3320      	adds	r3, #32
 800322a:	7663      	strb	r3, [r4, #25]
 800322c:	3310      	adds	r3, #16
 800322e:	76a3      	strb	r3, [r4, #26]
 8003230:	9507      	str	r5, [sp, #28]
 8003232:	0035      	movs	r5, r6
 8003234:	782b      	ldrb	r3, [r5, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <_svfiprintf_r+0x52>
 800323a:	2b25      	cmp	r3, #37	; 0x25
 800323c:	d147      	bne.n	80032ce <_svfiprintf_r+0xe2>
 800323e:	1bab      	subs	r3, r5, r6
 8003240:	9305      	str	r3, [sp, #20]
 8003242:	42b5      	cmp	r5, r6
 8003244:	d00c      	beq.n	8003260 <_svfiprintf_r+0x74>
 8003246:	0032      	movs	r2, r6
 8003248:	0039      	movs	r1, r7
 800324a:	9803      	ldr	r0, [sp, #12]
 800324c:	f7ff ff6c 	bl	8003128 <__ssputs_r>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d100      	bne.n	8003256 <_svfiprintf_r+0x6a>
 8003254:	e0ae      	b.n	80033b4 <_svfiprintf_r+0x1c8>
 8003256:	6962      	ldr	r2, [r4, #20]
 8003258:	9b05      	ldr	r3, [sp, #20]
 800325a:	4694      	mov	ip, r2
 800325c:	4463      	add	r3, ip
 800325e:	6163      	str	r3, [r4, #20]
 8003260:	782b      	ldrb	r3, [r5, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d100      	bne.n	8003268 <_svfiprintf_r+0x7c>
 8003266:	e0a5      	b.n	80033b4 <_svfiprintf_r+0x1c8>
 8003268:	2201      	movs	r2, #1
 800326a:	2300      	movs	r3, #0
 800326c:	4252      	negs	r2, r2
 800326e:	6062      	str	r2, [r4, #4]
 8003270:	a904      	add	r1, sp, #16
 8003272:	3254      	adds	r2, #84	; 0x54
 8003274:	1852      	adds	r2, r2, r1
 8003276:	1c6e      	adds	r6, r5, #1
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	60e3      	str	r3, [r4, #12]
 800327c:	60a3      	str	r3, [r4, #8]
 800327e:	7013      	strb	r3, [r2, #0]
 8003280:	65a3      	str	r3, [r4, #88]	; 0x58
 8003282:	2205      	movs	r2, #5
 8003284:	7831      	ldrb	r1, [r6, #0]
 8003286:	4854      	ldr	r0, [pc, #336]	; (80033d8 <_svfiprintf_r+0x1ec>)
 8003288:	f000 fa32 	bl	80036f0 <memchr>
 800328c:	1c75      	adds	r5, r6, #1
 800328e:	2800      	cmp	r0, #0
 8003290:	d11f      	bne.n	80032d2 <_svfiprintf_r+0xe6>
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	06d3      	lsls	r3, r2, #27
 8003296:	d504      	bpl.n	80032a2 <_svfiprintf_r+0xb6>
 8003298:	2353      	movs	r3, #83	; 0x53
 800329a:	a904      	add	r1, sp, #16
 800329c:	185b      	adds	r3, r3, r1
 800329e:	2120      	movs	r1, #32
 80032a0:	7019      	strb	r1, [r3, #0]
 80032a2:	0713      	lsls	r3, r2, #28
 80032a4:	d504      	bpl.n	80032b0 <_svfiprintf_r+0xc4>
 80032a6:	2353      	movs	r3, #83	; 0x53
 80032a8:	a904      	add	r1, sp, #16
 80032aa:	185b      	adds	r3, r3, r1
 80032ac:	212b      	movs	r1, #43	; 0x2b
 80032ae:	7019      	strb	r1, [r3, #0]
 80032b0:	7833      	ldrb	r3, [r6, #0]
 80032b2:	2b2a      	cmp	r3, #42	; 0x2a
 80032b4:	d016      	beq.n	80032e4 <_svfiprintf_r+0xf8>
 80032b6:	0035      	movs	r5, r6
 80032b8:	2100      	movs	r1, #0
 80032ba:	200a      	movs	r0, #10
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	782a      	ldrb	r2, [r5, #0]
 80032c0:	1c6e      	adds	r6, r5, #1
 80032c2:	3a30      	subs	r2, #48	; 0x30
 80032c4:	2a09      	cmp	r2, #9
 80032c6:	d94e      	bls.n	8003366 <_svfiprintf_r+0x17a>
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d111      	bne.n	80032f0 <_svfiprintf_r+0x104>
 80032cc:	e017      	b.n	80032fe <_svfiprintf_r+0x112>
 80032ce:	3501      	adds	r5, #1
 80032d0:	e7b0      	b.n	8003234 <_svfiprintf_r+0x48>
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <_svfiprintf_r+0x1ec>)
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	1ac0      	subs	r0, r0, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	4083      	lsls	r3, r0
 80032dc:	4313      	orrs	r3, r2
 80032de:	002e      	movs	r6, r5
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	e7ce      	b.n	8003282 <_svfiprintf_r+0x96>
 80032e4:	9b07      	ldr	r3, [sp, #28]
 80032e6:	1d19      	adds	r1, r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9107      	str	r1, [sp, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db01      	blt.n	80032f4 <_svfiprintf_r+0x108>
 80032f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80032f2:	e004      	b.n	80032fe <_svfiprintf_r+0x112>
 80032f4:	425b      	negs	r3, r3
 80032f6:	60e3      	str	r3, [r4, #12]
 80032f8:	2302      	movs	r3, #2
 80032fa:	4313      	orrs	r3, r2
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	782b      	ldrb	r3, [r5, #0]
 8003300:	2b2e      	cmp	r3, #46	; 0x2e
 8003302:	d10a      	bne.n	800331a <_svfiprintf_r+0x12e>
 8003304:	786b      	ldrb	r3, [r5, #1]
 8003306:	2b2a      	cmp	r3, #42	; 0x2a
 8003308:	d135      	bne.n	8003376 <_svfiprintf_r+0x18a>
 800330a:	9b07      	ldr	r3, [sp, #28]
 800330c:	3502      	adds	r5, #2
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	9207      	str	r2, [sp, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db2b      	blt.n	8003370 <_svfiprintf_r+0x184>
 8003318:	9309      	str	r3, [sp, #36]	; 0x24
 800331a:	4e30      	ldr	r6, [pc, #192]	; (80033dc <_svfiprintf_r+0x1f0>)
 800331c:	2203      	movs	r2, #3
 800331e:	0030      	movs	r0, r6
 8003320:	7829      	ldrb	r1, [r5, #0]
 8003322:	f000 f9e5 	bl	80036f0 <memchr>
 8003326:	2800      	cmp	r0, #0
 8003328:	d006      	beq.n	8003338 <_svfiprintf_r+0x14c>
 800332a:	2340      	movs	r3, #64	; 0x40
 800332c:	1b80      	subs	r0, r0, r6
 800332e:	4083      	lsls	r3, r0
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	3501      	adds	r5, #1
 8003334:	4313      	orrs	r3, r2
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	7829      	ldrb	r1, [r5, #0]
 800333a:	2206      	movs	r2, #6
 800333c:	4828      	ldr	r0, [pc, #160]	; (80033e0 <_svfiprintf_r+0x1f4>)
 800333e:	1c6e      	adds	r6, r5, #1
 8003340:	7621      	strb	r1, [r4, #24]
 8003342:	f000 f9d5 	bl	80036f0 <memchr>
 8003346:	2800      	cmp	r0, #0
 8003348:	d03c      	beq.n	80033c4 <_svfiprintf_r+0x1d8>
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <_svfiprintf_r+0x1f8>)
 800334c:	2b00      	cmp	r3, #0
 800334e:	d125      	bne.n	800339c <_svfiprintf_r+0x1b0>
 8003350:	2207      	movs	r2, #7
 8003352:	9b07      	ldr	r3, [sp, #28]
 8003354:	3307      	adds	r3, #7
 8003356:	4393      	bics	r3, r2
 8003358:	3308      	adds	r3, #8
 800335a:	9307      	str	r3, [sp, #28]
 800335c:	6963      	ldr	r3, [r4, #20]
 800335e:	9a04      	ldr	r2, [sp, #16]
 8003360:	189b      	adds	r3, r3, r2
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	e765      	b.n	8003232 <_svfiprintf_r+0x46>
 8003366:	4343      	muls	r3, r0
 8003368:	0035      	movs	r5, r6
 800336a:	2101      	movs	r1, #1
 800336c:	189b      	adds	r3, r3, r2
 800336e:	e7a6      	b.n	80032be <_svfiprintf_r+0xd2>
 8003370:	2301      	movs	r3, #1
 8003372:	425b      	negs	r3, r3
 8003374:	e7d0      	b.n	8003318 <_svfiprintf_r+0x12c>
 8003376:	2300      	movs	r3, #0
 8003378:	200a      	movs	r0, #10
 800337a:	001a      	movs	r2, r3
 800337c:	3501      	adds	r5, #1
 800337e:	6063      	str	r3, [r4, #4]
 8003380:	7829      	ldrb	r1, [r5, #0]
 8003382:	1c6e      	adds	r6, r5, #1
 8003384:	3930      	subs	r1, #48	; 0x30
 8003386:	2909      	cmp	r1, #9
 8003388:	d903      	bls.n	8003392 <_svfiprintf_r+0x1a6>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0c5      	beq.n	800331a <_svfiprintf_r+0x12e>
 800338e:	9209      	str	r2, [sp, #36]	; 0x24
 8003390:	e7c3      	b.n	800331a <_svfiprintf_r+0x12e>
 8003392:	4342      	muls	r2, r0
 8003394:	0035      	movs	r5, r6
 8003396:	2301      	movs	r3, #1
 8003398:	1852      	adds	r2, r2, r1
 800339a:	e7f1      	b.n	8003380 <_svfiprintf_r+0x194>
 800339c:	ab07      	add	r3, sp, #28
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	003a      	movs	r2, r7
 80033a2:	0021      	movs	r1, r4
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <_svfiprintf_r+0x1fc>)
 80033a6:	9803      	ldr	r0, [sp, #12]
 80033a8:	e000      	b.n	80033ac <_svfiprintf_r+0x1c0>
 80033aa:	bf00      	nop
 80033ac:	9004      	str	r0, [sp, #16]
 80033ae:	9b04      	ldr	r3, [sp, #16]
 80033b0:	3301      	adds	r3, #1
 80033b2:	d1d3      	bne.n	800335c <_svfiprintf_r+0x170>
 80033b4:	89bb      	ldrh	r3, [r7, #12]
 80033b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033b8:	065b      	lsls	r3, r3, #25
 80033ba:	d400      	bmi.n	80033be <_svfiprintf_r+0x1d2>
 80033bc:	e72d      	b.n	800321a <_svfiprintf_r+0x2e>
 80033be:	2001      	movs	r0, #1
 80033c0:	4240      	negs	r0, r0
 80033c2:	e72a      	b.n	800321a <_svfiprintf_r+0x2e>
 80033c4:	ab07      	add	r3, sp, #28
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	003a      	movs	r2, r7
 80033ca:	0021      	movs	r1, r4
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <_svfiprintf_r+0x1fc>)
 80033ce:	9803      	ldr	r0, [sp, #12]
 80033d0:	f000 f87c 	bl	80034cc <_printf_i>
 80033d4:	e7ea      	b.n	80033ac <_svfiprintf_r+0x1c0>
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	08003a48 	.word	0x08003a48
 80033dc:	08003a4e 	.word	0x08003a4e
 80033e0:	08003a52 	.word	0x08003a52
 80033e4:	00000000 	.word	0x00000000
 80033e8:	08003129 	.word	0x08003129

080033ec <_printf_common>:
 80033ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ee:	0015      	movs	r5, r2
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	688a      	ldr	r2, [r1, #8]
 80033f4:	690b      	ldr	r3, [r1, #16]
 80033f6:	000c      	movs	r4, r1
 80033f8:	9000      	str	r0, [sp, #0]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	da00      	bge.n	8003400 <_printf_common+0x14>
 80033fe:	0013      	movs	r3, r2
 8003400:	0022      	movs	r2, r4
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	3243      	adds	r2, #67	; 0x43
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	2a00      	cmp	r2, #0
 800340a:	d001      	beq.n	8003410 <_printf_common+0x24>
 800340c:	3301      	adds	r3, #1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	069b      	lsls	r3, r3, #26
 8003414:	d502      	bpl.n	800341c <_printf_common+0x30>
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	3302      	adds	r3, #2
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	2306      	movs	r3, #6
 8003420:	0017      	movs	r7, r2
 8003422:	401f      	ands	r7, r3
 8003424:	421a      	tst	r2, r3
 8003426:	d027      	beq.n	8003478 <_printf_common+0x8c>
 8003428:	0023      	movs	r3, r4
 800342a:	3343      	adds	r3, #67	; 0x43
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	1e5a      	subs	r2, r3, #1
 8003430:	4193      	sbcs	r3, r2
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	0692      	lsls	r2, r2, #26
 8003436:	d430      	bmi.n	800349a <_printf_common+0xae>
 8003438:	0022      	movs	r2, r4
 800343a:	9901      	ldr	r1, [sp, #4]
 800343c:	9800      	ldr	r0, [sp, #0]
 800343e:	9e08      	ldr	r6, [sp, #32]
 8003440:	3243      	adds	r2, #67	; 0x43
 8003442:	47b0      	blx	r6
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	d025      	beq.n	8003494 <_printf_common+0xa8>
 8003448:	2306      	movs	r3, #6
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	682a      	ldr	r2, [r5, #0]
 800344e:	68e1      	ldr	r1, [r4, #12]
 8003450:	2500      	movs	r5, #0
 8003452:	4003      	ands	r3, r0
 8003454:	2b04      	cmp	r3, #4
 8003456:	d103      	bne.n	8003460 <_printf_common+0x74>
 8003458:	1a8d      	subs	r5, r1, r2
 800345a:	43eb      	mvns	r3, r5
 800345c:	17db      	asrs	r3, r3, #31
 800345e:	401d      	ands	r5, r3
 8003460:	68a3      	ldr	r3, [r4, #8]
 8003462:	6922      	ldr	r2, [r4, #16]
 8003464:	4293      	cmp	r3, r2
 8003466:	dd01      	ble.n	800346c <_printf_common+0x80>
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	18ed      	adds	r5, r5, r3
 800346c:	2700      	movs	r7, #0
 800346e:	42bd      	cmp	r5, r7
 8003470:	d120      	bne.n	80034b4 <_printf_common+0xc8>
 8003472:	2000      	movs	r0, #0
 8003474:	e010      	b.n	8003498 <_printf_common+0xac>
 8003476:	3701      	adds	r7, #1
 8003478:	68e3      	ldr	r3, [r4, #12]
 800347a:	682a      	ldr	r2, [r5, #0]
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	42bb      	cmp	r3, r7
 8003480:	ddd2      	ble.n	8003428 <_printf_common+0x3c>
 8003482:	0022      	movs	r2, r4
 8003484:	2301      	movs	r3, #1
 8003486:	9901      	ldr	r1, [sp, #4]
 8003488:	9800      	ldr	r0, [sp, #0]
 800348a:	9e08      	ldr	r6, [sp, #32]
 800348c:	3219      	adds	r2, #25
 800348e:	47b0      	blx	r6
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d1f0      	bne.n	8003476 <_printf_common+0x8a>
 8003494:	2001      	movs	r0, #1
 8003496:	4240      	negs	r0, r0
 8003498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800349a:	2030      	movs	r0, #48	; 0x30
 800349c:	18e1      	adds	r1, r4, r3
 800349e:	3143      	adds	r1, #67	; 0x43
 80034a0:	7008      	strb	r0, [r1, #0]
 80034a2:	0021      	movs	r1, r4
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	3145      	adds	r1, #69	; 0x45
 80034a8:	7809      	ldrb	r1, [r1, #0]
 80034aa:	18a2      	adds	r2, r4, r2
 80034ac:	3243      	adds	r2, #67	; 0x43
 80034ae:	3302      	adds	r3, #2
 80034b0:	7011      	strb	r1, [r2, #0]
 80034b2:	e7c1      	b.n	8003438 <_printf_common+0x4c>
 80034b4:	0022      	movs	r2, r4
 80034b6:	2301      	movs	r3, #1
 80034b8:	9901      	ldr	r1, [sp, #4]
 80034ba:	9800      	ldr	r0, [sp, #0]
 80034bc:	9e08      	ldr	r6, [sp, #32]
 80034be:	321a      	adds	r2, #26
 80034c0:	47b0      	blx	r6
 80034c2:	1c43      	adds	r3, r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa8>
 80034c6:	3701      	adds	r7, #1
 80034c8:	e7d1      	b.n	800346e <_printf_common+0x82>
	...

080034cc <_printf_i>:
 80034cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ce:	b08b      	sub	sp, #44	; 0x2c
 80034d0:	9206      	str	r2, [sp, #24]
 80034d2:	000a      	movs	r2, r1
 80034d4:	3243      	adds	r2, #67	; 0x43
 80034d6:	9307      	str	r3, [sp, #28]
 80034d8:	9005      	str	r0, [sp, #20]
 80034da:	9204      	str	r2, [sp, #16]
 80034dc:	7e0a      	ldrb	r2, [r1, #24]
 80034de:	000c      	movs	r4, r1
 80034e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034e2:	2a78      	cmp	r2, #120	; 0x78
 80034e4:	d807      	bhi.n	80034f6 <_printf_i+0x2a>
 80034e6:	2a62      	cmp	r2, #98	; 0x62
 80034e8:	d809      	bhi.n	80034fe <_printf_i+0x32>
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d100      	bne.n	80034f0 <_printf_i+0x24>
 80034ee:	e0c1      	b.n	8003674 <_printf_i+0x1a8>
 80034f0:	2a58      	cmp	r2, #88	; 0x58
 80034f2:	d100      	bne.n	80034f6 <_printf_i+0x2a>
 80034f4:	e08c      	b.n	8003610 <_printf_i+0x144>
 80034f6:	0026      	movs	r6, r4
 80034f8:	3642      	adds	r6, #66	; 0x42
 80034fa:	7032      	strb	r2, [r6, #0]
 80034fc:	e022      	b.n	8003544 <_printf_i+0x78>
 80034fe:	0010      	movs	r0, r2
 8003500:	3863      	subs	r0, #99	; 0x63
 8003502:	2815      	cmp	r0, #21
 8003504:	d8f7      	bhi.n	80034f6 <_printf_i+0x2a>
 8003506:	f7fc fdff 	bl	8000108 <__gnu_thumb1_case_shi>
 800350a:	0016      	.short	0x0016
 800350c:	fff6001f 	.word	0xfff6001f
 8003510:	fff6fff6 	.word	0xfff6fff6
 8003514:	001ffff6 	.word	0x001ffff6
 8003518:	fff6fff6 	.word	0xfff6fff6
 800351c:	fff6fff6 	.word	0xfff6fff6
 8003520:	003600a8 	.word	0x003600a8
 8003524:	fff6009a 	.word	0xfff6009a
 8003528:	00b9fff6 	.word	0x00b9fff6
 800352c:	0036fff6 	.word	0x0036fff6
 8003530:	fff6fff6 	.word	0xfff6fff6
 8003534:	009e      	.short	0x009e
 8003536:	0026      	movs	r6, r4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	3642      	adds	r6, #66	; 0x42
 800353c:	1d11      	adds	r1, r2, #4
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	6813      	ldr	r3, [r2, #0]
 8003542:	7033      	strb	r3, [r6, #0]
 8003544:	2301      	movs	r3, #1
 8003546:	e0a7      	b.n	8003698 <_printf_i+0x1cc>
 8003548:	6808      	ldr	r0, [r1, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	1d0a      	adds	r2, r1, #4
 800354e:	0605      	lsls	r5, r0, #24
 8003550:	d50b      	bpl.n	800356a <_printf_i+0x9e>
 8003552:	680d      	ldr	r5, [r1, #0]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	2d00      	cmp	r5, #0
 8003558:	da03      	bge.n	8003562 <_printf_i+0x96>
 800355a:	232d      	movs	r3, #45	; 0x2d
 800355c:	9a04      	ldr	r2, [sp, #16]
 800355e:	426d      	negs	r5, r5
 8003560:	7013      	strb	r3, [r2, #0]
 8003562:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <_printf_i+0x21c>)
 8003564:	270a      	movs	r7, #10
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	e01b      	b.n	80035a2 <_printf_i+0xd6>
 800356a:	680d      	ldr	r5, [r1, #0]
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	0641      	lsls	r1, r0, #25
 8003570:	d5f1      	bpl.n	8003556 <_printf_i+0x8a>
 8003572:	b22d      	sxth	r5, r5
 8003574:	e7ef      	b.n	8003556 <_printf_i+0x8a>
 8003576:	680d      	ldr	r5, [r1, #0]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	1d08      	adds	r0, r1, #4
 800357c:	6018      	str	r0, [r3, #0]
 800357e:	062e      	lsls	r6, r5, #24
 8003580:	d501      	bpl.n	8003586 <_printf_i+0xba>
 8003582:	680d      	ldr	r5, [r1, #0]
 8003584:	e003      	b.n	800358e <_printf_i+0xc2>
 8003586:	066d      	lsls	r5, r5, #25
 8003588:	d5fb      	bpl.n	8003582 <_printf_i+0xb6>
 800358a:	680d      	ldr	r5, [r1, #0]
 800358c:	b2ad      	uxth	r5, r5
 800358e:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <_printf_i+0x21c>)
 8003590:	2708      	movs	r7, #8
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	2a6f      	cmp	r2, #111	; 0x6f
 8003596:	d000      	beq.n	800359a <_printf_i+0xce>
 8003598:	3702      	adds	r7, #2
 800359a:	0023      	movs	r3, r4
 800359c:	2200      	movs	r2, #0
 800359e:	3343      	adds	r3, #67	; 0x43
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db03      	blt.n	80035b2 <_printf_i+0xe6>
 80035aa:	2204      	movs	r2, #4
 80035ac:	6821      	ldr	r1, [r4, #0]
 80035ae:	4391      	bics	r1, r2
 80035b0:	6021      	str	r1, [r4, #0]
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	d102      	bne.n	80035bc <_printf_i+0xf0>
 80035b6:	9e04      	ldr	r6, [sp, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <_printf_i+0x10a>
 80035bc:	9e04      	ldr	r6, [sp, #16]
 80035be:	0028      	movs	r0, r5
 80035c0:	0039      	movs	r1, r7
 80035c2:	f7fc fe31 	bl	8000228 <__aeabi_uidivmod>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	3e01      	subs	r6, #1
 80035ca:	5c5b      	ldrb	r3, [r3, r1]
 80035cc:	7033      	strb	r3, [r6, #0]
 80035ce:	002b      	movs	r3, r5
 80035d0:	0005      	movs	r5, r0
 80035d2:	429f      	cmp	r7, r3
 80035d4:	d9f3      	bls.n	80035be <_printf_i+0xf2>
 80035d6:	2f08      	cmp	r7, #8
 80035d8:	d109      	bne.n	80035ee <_printf_i+0x122>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	07db      	lsls	r3, r3, #31
 80035de:	d506      	bpl.n	80035ee <_printf_i+0x122>
 80035e0:	6863      	ldr	r3, [r4, #4]
 80035e2:	6922      	ldr	r2, [r4, #16]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	dc02      	bgt.n	80035ee <_printf_i+0x122>
 80035e8:	2330      	movs	r3, #48	; 0x30
 80035ea:	3e01      	subs	r6, #1
 80035ec:	7033      	strb	r3, [r6, #0]
 80035ee:	9b04      	ldr	r3, [sp, #16]
 80035f0:	1b9b      	subs	r3, r3, r6
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	9b07      	ldr	r3, [sp, #28]
 80035f6:	0021      	movs	r1, r4
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	9805      	ldr	r0, [sp, #20]
 80035fc:	9b06      	ldr	r3, [sp, #24]
 80035fe:	aa09      	add	r2, sp, #36	; 0x24
 8003600:	f7ff fef4 	bl	80033ec <_printf_common>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d14c      	bne.n	80036a2 <_printf_i+0x1d6>
 8003608:	2001      	movs	r0, #1
 800360a:	4240      	negs	r0, r0
 800360c:	b00b      	add	sp, #44	; 0x2c
 800360e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003610:	3145      	adds	r1, #69	; 0x45
 8003612:	700a      	strb	r2, [r1, #0]
 8003614:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <_printf_i+0x21c>)
 8003616:	9203      	str	r2, [sp, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	ca20      	ldmia	r2!, {r5}
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	0608      	lsls	r0, r1, #24
 8003622:	d516      	bpl.n	8003652 <_printf_i+0x186>
 8003624:	07cb      	lsls	r3, r1, #31
 8003626:	d502      	bpl.n	800362e <_printf_i+0x162>
 8003628:	2320      	movs	r3, #32
 800362a:	4319      	orrs	r1, r3
 800362c:	6021      	str	r1, [r4, #0]
 800362e:	2710      	movs	r7, #16
 8003630:	2d00      	cmp	r5, #0
 8003632:	d1b2      	bne.n	800359a <_printf_i+0xce>
 8003634:	2320      	movs	r3, #32
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	439a      	bics	r2, r3
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	e7ad      	b.n	800359a <_printf_i+0xce>
 800363e:	2220      	movs	r2, #32
 8003640:	6809      	ldr	r1, [r1, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	6022      	str	r2, [r4, #0]
 8003646:	0022      	movs	r2, r4
 8003648:	2178      	movs	r1, #120	; 0x78
 800364a:	3245      	adds	r2, #69	; 0x45
 800364c:	7011      	strb	r1, [r2, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <_printf_i+0x220>)
 8003650:	e7e1      	b.n	8003616 <_printf_i+0x14a>
 8003652:	0648      	lsls	r0, r1, #25
 8003654:	d5e6      	bpl.n	8003624 <_printf_i+0x158>
 8003656:	b2ad      	uxth	r5, r5
 8003658:	e7e4      	b.n	8003624 <_printf_i+0x158>
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	680d      	ldr	r5, [r1, #0]
 800365e:	1d10      	adds	r0, r2, #4
 8003660:	6949      	ldr	r1, [r1, #20]
 8003662:	6018      	str	r0, [r3, #0]
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	062e      	lsls	r6, r5, #24
 8003668:	d501      	bpl.n	800366e <_printf_i+0x1a2>
 800366a:	6019      	str	r1, [r3, #0]
 800366c:	e002      	b.n	8003674 <_printf_i+0x1a8>
 800366e:	066d      	lsls	r5, r5, #25
 8003670:	d5fb      	bpl.n	800366a <_printf_i+0x19e>
 8003672:	8019      	strh	r1, [r3, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	9e04      	ldr	r6, [sp, #16]
 8003678:	6123      	str	r3, [r4, #16]
 800367a:	e7bb      	b.n	80035f4 <_printf_i+0x128>
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	1d11      	adds	r1, r2, #4
 8003680:	6019      	str	r1, [r3, #0]
 8003682:	6816      	ldr	r6, [r2, #0]
 8003684:	2100      	movs	r1, #0
 8003686:	0030      	movs	r0, r6
 8003688:	6862      	ldr	r2, [r4, #4]
 800368a:	f000 f831 	bl	80036f0 <memchr>
 800368e:	2800      	cmp	r0, #0
 8003690:	d001      	beq.n	8003696 <_printf_i+0x1ca>
 8003692:	1b80      	subs	r0, r0, r6
 8003694:	6060      	str	r0, [r4, #4]
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	2300      	movs	r3, #0
 800369c:	9a04      	ldr	r2, [sp, #16]
 800369e:	7013      	strb	r3, [r2, #0]
 80036a0:	e7a8      	b.n	80035f4 <_printf_i+0x128>
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	0032      	movs	r2, r6
 80036a6:	9906      	ldr	r1, [sp, #24]
 80036a8:	9805      	ldr	r0, [sp, #20]
 80036aa:	9d07      	ldr	r5, [sp, #28]
 80036ac:	47a8      	blx	r5
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	d0aa      	beq.n	8003608 <_printf_i+0x13c>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d415      	bmi.n	80036e4 <_printf_i+0x218>
 80036b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ba:	68e0      	ldr	r0, [r4, #12]
 80036bc:	4298      	cmp	r0, r3
 80036be:	daa5      	bge.n	800360c <_printf_i+0x140>
 80036c0:	0018      	movs	r0, r3
 80036c2:	e7a3      	b.n	800360c <_printf_i+0x140>
 80036c4:	0022      	movs	r2, r4
 80036c6:	2301      	movs	r3, #1
 80036c8:	9906      	ldr	r1, [sp, #24]
 80036ca:	9805      	ldr	r0, [sp, #20]
 80036cc:	9e07      	ldr	r6, [sp, #28]
 80036ce:	3219      	adds	r2, #25
 80036d0:	47b0      	blx	r6
 80036d2:	1c43      	adds	r3, r0, #1
 80036d4:	d098      	beq.n	8003608 <_printf_i+0x13c>
 80036d6:	3501      	adds	r5, #1
 80036d8:	68e3      	ldr	r3, [r4, #12]
 80036da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	42ab      	cmp	r3, r5
 80036e0:	dcf0      	bgt.n	80036c4 <_printf_i+0x1f8>
 80036e2:	e7e9      	b.n	80036b8 <_printf_i+0x1ec>
 80036e4:	2500      	movs	r5, #0
 80036e6:	e7f7      	b.n	80036d8 <_printf_i+0x20c>
 80036e8:	08003a59 	.word	0x08003a59
 80036ec:	08003a6a 	.word	0x08003a6a

080036f0 <memchr>:
 80036f0:	b2c9      	uxtb	r1, r1
 80036f2:	1882      	adds	r2, r0, r2
 80036f4:	4290      	cmp	r0, r2
 80036f6:	d101      	bne.n	80036fc <memchr+0xc>
 80036f8:	2000      	movs	r0, #0
 80036fa:	4770      	bx	lr
 80036fc:	7803      	ldrb	r3, [r0, #0]
 80036fe:	428b      	cmp	r3, r1
 8003700:	d0fb      	beq.n	80036fa <memchr+0xa>
 8003702:	3001      	adds	r0, #1
 8003704:	e7f6      	b.n	80036f4 <memchr+0x4>

08003706 <memcpy>:
 8003706:	2300      	movs	r3, #0
 8003708:	b510      	push	{r4, lr}
 800370a:	429a      	cmp	r2, r3
 800370c:	d100      	bne.n	8003710 <memcpy+0xa>
 800370e:	bd10      	pop	{r4, pc}
 8003710:	5ccc      	ldrb	r4, [r1, r3]
 8003712:	54c4      	strb	r4, [r0, r3]
 8003714:	3301      	adds	r3, #1
 8003716:	e7f8      	b.n	800370a <memcpy+0x4>

08003718 <memmove>:
 8003718:	b510      	push	{r4, lr}
 800371a:	4288      	cmp	r0, r1
 800371c:	d902      	bls.n	8003724 <memmove+0xc>
 800371e:	188b      	adds	r3, r1, r2
 8003720:	4298      	cmp	r0, r3
 8003722:	d303      	bcc.n	800372c <memmove+0x14>
 8003724:	2300      	movs	r3, #0
 8003726:	e007      	b.n	8003738 <memmove+0x20>
 8003728:	5c8b      	ldrb	r3, [r1, r2]
 800372a:	5483      	strb	r3, [r0, r2]
 800372c:	3a01      	subs	r2, #1
 800372e:	d2fb      	bcs.n	8003728 <memmove+0x10>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	5ccc      	ldrb	r4, [r1, r3]
 8003734:	54c4      	strb	r4, [r0, r3]
 8003736:	3301      	adds	r3, #1
 8003738:	429a      	cmp	r2, r3
 800373a:	d1fa      	bne.n	8003732 <memmove+0x1a>
 800373c:	e7f8      	b.n	8003730 <memmove+0x18>
	...

08003740 <_free_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	0005      	movs	r5, r0
 8003744:	2900      	cmp	r1, #0
 8003746:	d010      	beq.n	800376a <_free_r+0x2a>
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da00      	bge.n	8003752 <_free_r+0x12>
 8003750:	18e4      	adds	r4, r4, r3
 8003752:	0028      	movs	r0, r5
 8003754:	f000 f918 	bl	8003988 <__malloc_lock>
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <_free_r+0x90>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <_free_r+0x2c>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f000 f917 	bl	8003998 <__malloc_unlock>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	42a3      	cmp	r3, r4
 800376e:	d908      	bls.n	8003782 <_free_r+0x42>
 8003770:	6821      	ldr	r1, [r4, #0]
 8003772:	1860      	adds	r0, r4, r1
 8003774:	4283      	cmp	r3, r0
 8003776:	d1f3      	bne.n	8003760 <_free_r+0x20>
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	1841      	adds	r1, r0, r1
 800377e:	6021      	str	r1, [r4, #0]
 8003780:	e7ee      	b.n	8003760 <_free_r+0x20>
 8003782:	001a      	movs	r2, r3
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_free_r+0x4e>
 800378a:	42a3      	cmp	r3, r4
 800378c:	d9f9      	bls.n	8003782 <_free_r+0x42>
 800378e:	6811      	ldr	r1, [r2, #0]
 8003790:	1850      	adds	r0, r2, r1
 8003792:	42a0      	cmp	r0, r4
 8003794:	d10b      	bne.n	80037ae <_free_r+0x6e>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1809      	adds	r1, r1, r0
 800379a:	1850      	adds	r0, r2, r1
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	4283      	cmp	r3, r0
 80037a0:	d1e0      	bne.n	8003764 <_free_r+0x24>
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	1841      	adds	r1, r0, r1
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	6053      	str	r3, [r2, #4]
 80037ac:	e7da      	b.n	8003764 <_free_r+0x24>
 80037ae:	42a0      	cmp	r0, r4
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x78>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d5      	b.n	8003764 <_free_r+0x24>
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	1860      	adds	r0, r4, r1
 80037bc:	4283      	cmp	r3, r0
 80037be:	d103      	bne.n	80037c8 <_free_r+0x88>
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	1841      	adds	r1, r0, r1
 80037c6:	6021      	str	r1, [r4, #0]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6054      	str	r4, [r2, #4]
 80037cc:	e7ca      	b.n	8003764 <_free_r+0x24>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000290 	.word	0x20000290

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0f      	ldr	r6, [pc, #60]	; (8003814 <sbrk_aligned+0x40>)
 80037d8:	000d      	movs	r5, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	0004      	movs	r4, r0
 80037de:	2900      	cmp	r1, #0
 80037e0:	d102      	bne.n	80037e8 <sbrk_aligned+0x14>
 80037e2:	f000 f8bf 	bl	8003964 <_sbrk_r>
 80037e6:	6030      	str	r0, [r6, #0]
 80037e8:	0029      	movs	r1, r5
 80037ea:	0020      	movs	r0, r4
 80037ec:	f000 f8ba 	bl	8003964 <_sbrk_r>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d00a      	beq.n	800380a <sbrk_aligned+0x36>
 80037f4:	2303      	movs	r3, #3
 80037f6:	1cc5      	adds	r5, r0, #3
 80037f8:	439d      	bics	r5, r3
 80037fa:	42a8      	cmp	r0, r5
 80037fc:	d007      	beq.n	800380e <sbrk_aligned+0x3a>
 80037fe:	1a29      	subs	r1, r5, r0
 8003800:	0020      	movs	r0, r4
 8003802:	f000 f8af 	bl	8003964 <_sbrk_r>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	d101      	bne.n	800380e <sbrk_aligned+0x3a>
 800380a:	2501      	movs	r5, #1
 800380c:	426d      	negs	r5, r5
 800380e:	0028      	movs	r0, r5
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000294 	.word	0x20000294

08003818 <_malloc_r>:
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	2203      	movs	r2, #3
 800381c:	1ccb      	adds	r3, r1, #3
 800381e:	4393      	bics	r3, r2
 8003820:	3308      	adds	r3, #8
 8003822:	0006      	movs	r6, r0
 8003824:	001f      	movs	r7, r3
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d232      	bcs.n	8003890 <_malloc_r+0x78>
 800382a:	270c      	movs	r7, #12
 800382c:	42b9      	cmp	r1, r7
 800382e:	d831      	bhi.n	8003894 <_malloc_r+0x7c>
 8003830:	0030      	movs	r0, r6
 8003832:	f000 f8a9 	bl	8003988 <__malloc_lock>
 8003836:	4d32      	ldr	r5, [pc, #200]	; (8003900 <_malloc_r+0xe8>)
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	001c      	movs	r4, r3
 800383c:	2c00      	cmp	r4, #0
 800383e:	d12e      	bne.n	800389e <_malloc_r+0x86>
 8003840:	0039      	movs	r1, r7
 8003842:	0030      	movs	r0, r6
 8003844:	f7ff ffc6 	bl	80037d4 <sbrk_aligned>
 8003848:	0004      	movs	r4, r0
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d11e      	bne.n	800388c <_malloc_r+0x74>
 800384e:	682c      	ldr	r4, [r5, #0]
 8003850:	0025      	movs	r5, r4
 8003852:	2d00      	cmp	r5, #0
 8003854:	d14a      	bne.n	80038ec <_malloc_r+0xd4>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0029      	movs	r1, r5
 800385a:	18e3      	adds	r3, r4, r3
 800385c:	0030      	movs	r0, r6
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f000 f880 	bl	8003964 <_sbrk_r>
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	4283      	cmp	r3, r0
 8003868:	d143      	bne.n	80038f2 <_malloc_r+0xda>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	3703      	adds	r7, #3
 800386e:	1aff      	subs	r7, r7, r3
 8003870:	2303      	movs	r3, #3
 8003872:	439f      	bics	r7, r3
 8003874:	3708      	adds	r7, #8
 8003876:	2f0c      	cmp	r7, #12
 8003878:	d200      	bcs.n	800387c <_malloc_r+0x64>
 800387a:	270c      	movs	r7, #12
 800387c:	0039      	movs	r1, r7
 800387e:	0030      	movs	r0, r6
 8003880:	f7ff ffa8 	bl	80037d4 <sbrk_aligned>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d034      	beq.n	80038f2 <_malloc_r+0xda>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	19df      	adds	r7, r3, r7
 800388c:	6027      	str	r7, [r4, #0]
 800388e:	e013      	b.n	80038b8 <_malloc_r+0xa0>
 8003890:	2b00      	cmp	r3, #0
 8003892:	dacb      	bge.n	800382c <_malloc_r+0x14>
 8003894:	230c      	movs	r3, #12
 8003896:	2500      	movs	r5, #0
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	0028      	movs	r0, r5
 800389c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	1bd1      	subs	r1, r2, r7
 80038a2:	d420      	bmi.n	80038e6 <_malloc_r+0xce>
 80038a4:	290b      	cmp	r1, #11
 80038a6:	d917      	bls.n	80038d8 <_malloc_r+0xc0>
 80038a8:	19e2      	adds	r2, r4, r7
 80038aa:	6027      	str	r7, [r4, #0]
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d111      	bne.n	80038d4 <_malloc_r+0xbc>
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	6011      	str	r1, [r2, #0]
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	0030      	movs	r0, r6
 80038ba:	0025      	movs	r5, r4
 80038bc:	f000 f86c 	bl	8003998 <__malloc_unlock>
 80038c0:	2207      	movs	r2, #7
 80038c2:	350b      	adds	r5, #11
 80038c4:	1d23      	adds	r3, r4, #4
 80038c6:	4395      	bics	r5, r2
 80038c8:	1aea      	subs	r2, r5, r3
 80038ca:	429d      	cmp	r5, r3
 80038cc:	d0e5      	beq.n	800389a <_malloc_r+0x82>
 80038ce:	1b5b      	subs	r3, r3, r5
 80038d0:	50a3      	str	r3, [r4, r2]
 80038d2:	e7e2      	b.n	800389a <_malloc_r+0x82>
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e7ec      	b.n	80038b2 <_malloc_r+0x9a>
 80038d8:	6862      	ldr	r2, [r4, #4]
 80038da:	42a3      	cmp	r3, r4
 80038dc:	d101      	bne.n	80038e2 <_malloc_r+0xca>
 80038de:	602a      	str	r2, [r5, #0]
 80038e0:	e7ea      	b.n	80038b8 <_malloc_r+0xa0>
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	e7e8      	b.n	80038b8 <_malloc_r+0xa0>
 80038e6:	0023      	movs	r3, r4
 80038e8:	6864      	ldr	r4, [r4, #4]
 80038ea:	e7a7      	b.n	800383c <_malloc_r+0x24>
 80038ec:	002c      	movs	r4, r5
 80038ee:	686d      	ldr	r5, [r5, #4]
 80038f0:	e7af      	b.n	8003852 <_malloc_r+0x3a>
 80038f2:	230c      	movs	r3, #12
 80038f4:	0030      	movs	r0, r6
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f000 f84e 	bl	8003998 <__malloc_unlock>
 80038fc:	e7cd      	b.n	800389a <_malloc_r+0x82>
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	20000290 	.word	0x20000290

08003904 <_realloc_r>:
 8003904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003906:	0007      	movs	r7, r0
 8003908:	000e      	movs	r6, r1
 800390a:	0014      	movs	r4, r2
 800390c:	2900      	cmp	r1, #0
 800390e:	d105      	bne.n	800391c <_realloc_r+0x18>
 8003910:	0011      	movs	r1, r2
 8003912:	f7ff ff81 	bl	8003818 <_malloc_r>
 8003916:	0005      	movs	r5, r0
 8003918:	0028      	movs	r0, r5
 800391a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800391c:	2a00      	cmp	r2, #0
 800391e:	d103      	bne.n	8003928 <_realloc_r+0x24>
 8003920:	f7ff ff0e 	bl	8003740 <_free_r>
 8003924:	0025      	movs	r5, r4
 8003926:	e7f7      	b.n	8003918 <_realloc_r+0x14>
 8003928:	f000 f83e 	bl	80039a8 <_malloc_usable_size_r>
 800392c:	9001      	str	r0, [sp, #4]
 800392e:	4284      	cmp	r4, r0
 8003930:	d803      	bhi.n	800393a <_realloc_r+0x36>
 8003932:	0035      	movs	r5, r6
 8003934:	0843      	lsrs	r3, r0, #1
 8003936:	42a3      	cmp	r3, r4
 8003938:	d3ee      	bcc.n	8003918 <_realloc_r+0x14>
 800393a:	0021      	movs	r1, r4
 800393c:	0038      	movs	r0, r7
 800393e:	f7ff ff6b 	bl	8003818 <_malloc_r>
 8003942:	1e05      	subs	r5, r0, #0
 8003944:	d0e8      	beq.n	8003918 <_realloc_r+0x14>
 8003946:	9b01      	ldr	r3, [sp, #4]
 8003948:	0022      	movs	r2, r4
 800394a:	429c      	cmp	r4, r3
 800394c:	d900      	bls.n	8003950 <_realloc_r+0x4c>
 800394e:	001a      	movs	r2, r3
 8003950:	0031      	movs	r1, r6
 8003952:	0028      	movs	r0, r5
 8003954:	f7ff fed7 	bl	8003706 <memcpy>
 8003958:	0031      	movs	r1, r6
 800395a:	0038      	movs	r0, r7
 800395c:	f7ff fef0 	bl	8003740 <_free_r>
 8003960:	e7da      	b.n	8003918 <_realloc_r+0x14>
	...

08003964 <_sbrk_r>:
 8003964:	2300      	movs	r3, #0
 8003966:	b570      	push	{r4, r5, r6, lr}
 8003968:	4d06      	ldr	r5, [pc, #24]	; (8003984 <_sbrk_r+0x20>)
 800396a:	0004      	movs	r4, r0
 800396c:	0008      	movs	r0, r1
 800396e:	602b      	str	r3, [r5, #0]
 8003970:	f7fd fa68 	bl	8000e44 <_sbrk>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d103      	bne.n	8003980 <_sbrk_r+0x1c>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d000      	beq.n	8003980 <_sbrk_r+0x1c>
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20000298 	.word	0x20000298

08003988 <__malloc_lock>:
 8003988:	b510      	push	{r4, lr}
 800398a:	4802      	ldr	r0, [pc, #8]	; (8003994 <__malloc_lock+0xc>)
 800398c:	f000 f814 	bl	80039b8 <__retarget_lock_acquire_recursive>
 8003990:	bd10      	pop	{r4, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	2000029c 	.word	0x2000029c

08003998 <__malloc_unlock>:
 8003998:	b510      	push	{r4, lr}
 800399a:	4802      	ldr	r0, [pc, #8]	; (80039a4 <__malloc_unlock+0xc>)
 800399c:	f000 f80d 	bl	80039ba <__retarget_lock_release_recursive>
 80039a0:	bd10      	pop	{r4, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	2000029c 	.word	0x2000029c

080039a8 <_malloc_usable_size_r>:
 80039a8:	1f0b      	subs	r3, r1, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1f18      	subs	r0, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da01      	bge.n	80039b6 <_malloc_usable_size_r+0xe>
 80039b2:	580b      	ldr	r3, [r1, r0]
 80039b4:	18c0      	adds	r0, r0, r3
 80039b6:	4770      	bx	lr

080039b8 <__retarget_lock_acquire_recursive>:
 80039b8:	4770      	bx	lr

080039ba <__retarget_lock_release_recursive>:
 80039ba:	4770      	bx	lr

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
