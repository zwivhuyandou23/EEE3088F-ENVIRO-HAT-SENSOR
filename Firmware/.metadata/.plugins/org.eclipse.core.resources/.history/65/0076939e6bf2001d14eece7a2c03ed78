#include "stm32f0xx.h"
#include "stdio.h"

#define TCA0_3_3VATE_ADDRESS    0x48
#define TCA0_3_3VATE_TEMP_REG   0x00

void delay_ms(uint32_t ms)
{
    uint32_t delay = ms * (SystemCoreClock / 8000);
    while (delay--)
        __NOP();
}

void I2C_Init(void)
{
    // Enable GPIOF clock
    RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    // Configure PF8 (I2C1_SCL) and PF7 (I2C1_SDA) as alternate function mode
    GPIOF->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER7);
    GPIOF->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER7_1;
    GPIOF->OTYPER |= GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_7;
    GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR7;
    GPIOF->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR7_0;
    GPIOF->AFR[1] |= (1 << ((8 - 8) * 4)) | (1 << ((7 - 8) * 4));

    // Enable I2C1 clock
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;

    // Configure I2C1
    I2C1->CR1 = 0;
    I2C1->CR2 = 0;
    I2C1->TIMINGR = 0x2000090E; // Use default timing (100kHz)
    I2C1->CR1 |= I2C_CR1_PE;
}

void I2C_Start(void)
{
    I2C1->CR2 |= I2C_CR2_START;
    while (!(I2C1->ISR & I2C_ISR_SB))
        ;
}

void I2C_Stop(void)
{
    I2C1->CR2 |= I2C_CR2_STOP;
    while (I2C1->CR2 & I2C_CR2_STOP)
        ;
}

void I2C_WriteByte(uint8_t data)
{
    I2C1->TXDR = data;
    while (!(I2C1->ISR & I2C_ISR_TXE))
        ;
}

uint8_t I2C_ReadByte(void)
{
    while (!(I2C1->ISR & I2C_ISR_RXNE))
        ;
    return I2C1->RXDR;
}

void I2C_WriteRegister(uint8_t reg, uint8_t value)
{
    I2C_Start();
    I2C_WriteByte(TCA0_3_3VATE_ADDRESS << 1);
    I2C_WriteByte(reg);
    I2C_WriteByte(value);
    I2C_Stop();
}


    		uint8_t I2C_ReadRegister(uint8_t reg)
    		{
    		    I2C_Start();
    		    I2C_WriteByte(TCA0_3_3VATE_ADDRESS << 1);
    		    I2C_WriteByte(reg);
    		    I2C_Start();
    		    I2C_WriteByte((TCA0_3_3VATE_ADDRESS << 1) | 1);
    		    uint8_t data = I2C_ReadByte();
    		    I2C_Stop();
    		    return data;
    		}

    		int main(void)
    		{
    		    // Initialize the system clock
    		    SystemInit();

    		    // Initialize the I2C peripheral
    		    I2C_Init();

    		    // Read temperature from TC&A0-3.3Vate sensor
    		    uint8_t temperature = I2C_ReadRegister(TCA0_3_3VATE_TEMP_REG);

    		    // Print temperature to the screen
    		    printf("Temperature: %d\n", temperature);

    		    while (1)
    		    {
    		        // Main loop
    		    }
    		}
